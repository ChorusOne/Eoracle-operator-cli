// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractEOStakeRegistry

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// IEOStakeRegistryStakeUpdate is an auto generated low-level Go binding around an user-defined struct.
type IEOStakeRegistryStakeUpdate struct {
	UpdateBlockNumber     uint32
	NextUpdateBlockNumber uint32
	Stake                 *big.Int
}

// IEOStakeRegistryStrategyParams is an auto generated low-level Go binding around an user-defined struct.
type IEOStakeRegistryStrategyParams struct {
	Strategy   common.Address
	Multiplier *big.Int
}

// ContractEOStakeRegistryMetaData contains all meta data concerning the ContractEOStakeRegistry contract.
var ContractEOStakeRegistryMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"constructor\",\"inputs\":[{\"name\":\"_registryCoordinator\",\"type\":\"address\",\"internalType\":\"contractIEORegistryCoordinator\"},{\"name\":\"_delegationManager\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"MAX_WEIGHING_FUNCTION_LENGTH\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"WEIGHTING_DIVISOR\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"addStrategies\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"_strategyParams\",\"type\":\"tuple[]\",\"internalType\":\"structIEOStakeRegistry.StrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"delegation\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIDelegationManager\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"deregisterOperator\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getCurrentStake\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getCurrentTotalStake\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getLatestStakeUpdate\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIEOStakeRegistry.StakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeAtBlockNumber\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeAtBlockNumberAndIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeHistory\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple[]\",\"internalType\":\"structIEOStakeRegistry.StakeUpdate[]\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeHistoryLength\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeUpdateAtIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIEOStakeRegistry.StakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getStakeUpdateIndexAtBlockNumber\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32\",\"internalType\":\"uint32\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeAtBlockNumberFromIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeHistoryLength\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeIndicesAtBlockNumber\",\"inputs\":[{\"name\":\"blockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint32[]\",\"internalType\":\"uint32[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getTotalStakeUpdateAtIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIEOStakeRegistry.StakeUpdate\",\"components\":[{\"name\":\"updateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\",\"internalType\":\"uint32\"},{\"name\":\"stake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initializeQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"internalType\":\"uint96\"},{\"name\":\"_strategyParams\",\"type\":\"tuple[]\",\"internalType\":\"structIEOStakeRegistry.StrategyParams[]\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"minimumStakeForQuorum\",\"inputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"modifyStrategyParams\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"strategyIndices\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"},{\"name\":\"newMultipliers\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registerOperator\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"},{\"name\":\"\",\"type\":\"uint96[]\",\"internalType\":\"uint96[]\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"registryCoordinator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"removeStrategies\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"indicesToRemove\",\"type\":\"uint256[]\",\"internalType\":\"uint256[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setMinimumStakeForQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"strategiesPerQuorum\",\"inputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyParams\",\"inputs\":[{\"name\":\"\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyParamsByIndex\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"index\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"tuple\",\"internalType\":\"structIEOStakeRegistry.StrategyParams\",\"components\":[{\"name\":\"strategy\",\"type\":\"address\",\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint96\",\"internalType\":\"uint96\"}]}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"strategyParamsLength\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"updateOperatorStake\",\"inputs\":[{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"operatorId\",\"type\":\"bytes32\",\"internalType\":\"bytes32\"},{\"name\":\"quorumNumbers\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint192\",\"internalType\":\"uint192\"}],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"weightOfOperatorForQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"internalType\":\"uint8\"},{\"name\":\"operator\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint96\",\"internalType\":\"uint96\"}],\"stateMutability\":\"view\"},{\"type\":\"event\",\"name\":\"MinimumStakeForQuorumUpdated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"minimumStake\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OperatorStakeUpdate\",\"inputs\":[{\"name\":\"operatorId\",\"type\":\"bytes32\",\"indexed\":true,\"internalType\":\"bytes32\"},{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"},{\"name\":\"stake\",\"type\":\"uint96\",\"indexed\":false,\"internalType\":\"uint96\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"QuorumCreated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyAddedToQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyMultiplierUpdated\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"},{\"name\":\"multiplier\",\"type\":\"uint256\",\"indexed\":false,\"internalType\":\"uint256\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"StrategyRemovedFromQuorum\",\"inputs\":[{\"name\":\"quorumNumber\",\"type\":\"uint8\",\"indexed\":true,\"internalType\":\"uint8\"},{\"name\":\"strategy\",\"type\":\"address\",\"indexed\":false,\"internalType\":\"contractIStrategy\"}],\"anonymous\":false}]",
	Bin: "0x60c06040523480156200001157600080fd5b5060405162003ac938038062003ac9833981016040819052620000349162000065565b6001600160a01b0391821660a05216608052620000a4565b6001600160a01b03811681146200006257600080fd5b50565b600080604083850312156200007957600080fd5b825162000086816200004c565b602084015190925062000099816200004c565b809150509250929050565b60805160a0516139c0620001096000396000818161037a015281816106320152818161097801528181610cf70152818161112201528181611716015281816118180152818161193c0152611cfa0152600081816105290152611ec301526139c06000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80639f3ccf651161010f578063c8294c56116100a2578063f2be94ae11610071578063f2be94ae1461054b578063f851e1981461055e578063fa28c62714610571578063ff694a771461058457600080fd5b8063c8294c56146104d6578063d5eccc05146104e9578063dd9846b9146104fc578063df5cf7231461052457600080fd5b8063bc9a40c3116100de578063bc9a40c314610474578063bd29b8cd14610487578063c46778a51461049a578063c601527d146104c357600080fd5b80639f3ccf65146103ee578063ac6bfb0314610401578063adc804da14610421578063b6904b781461046157600080fd5b80634bd26e091161018757806366acfefe1161015657806366acfefe1461034a5780636d14a987146103755780637c172347146103b457806381c07502146103ce57600080fd5b80634bd26e09146102e55780635401ed27146103155780635e5a6775146103285780635f1f2d771461033757600080fd5b806320b66298116101c357806320b662981461026c57806325504777146102815780632cd95940146102a25780633ca5a5f5146102c257600080fd5b80630491b41c146101ea57806308732461146102205780631f9b74e014610241575b600080fd5b61020d6101f8366004612da0565b60ff1660009081526001602052604090205490565b6040519081526020015b60405180910390f35b61023361022e366004612dbb565b610597565b604051610217929190612de5565b61025461024f366004612e1f565b6105e0565b6040516001600160601b039091168152602001610217565b61027f61027a366004612e9a565b610630565b005b61029461028f366004612f5b565b61096a565b604051610217929190612ffa565b6102b56102b036600461301f565b610c3d565b604051610217919061304b565b61020d6102d0366004612da0565b60ff1660009081526003602052604090205490565b61020d6102f336600461301f565b600091825260026020908152604080842060ff93909316845291905290205490565b61025461032336600461301f565b610cdc565b61020d670de0b6b3a764000081565b61027f610345366004613154565b610cf5565b61035d610358366004612f5b565b611115565b6040516001600160c01b039091168152602001610217565b61039c7f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610217565b6103bc602081565b60405160ff9091168152602001610217565b6103e16103dc366004613210565b61126f565b6040516102179190613262565b61039c6103fc366004612dbb565b61153b565b61041461040f3660046132a0565b611573565b60405161021791906132d3565b61043461042f366004612dbb565b61160b565b6040805182516001600160a01b031681526020928301516001600160601b03169281019290925201610217565b61041461046f366004612dbb565b611685565b61027f61048236600461331f565b611714565b61027f610495366004613349565b61180d565b6102546104a8366004612da0565b6000602081905290815260409020546001600160601b031681565b61027f6104d1366004613415565b61193a565b6102546104e4366004613462565b611a2e565b6102546104f7366004612da0565b611aac565b61050f61050a36600461349e565b611aff565b60405163ffffffff9091168152602001610217565b61039c7f000000000000000000000000000000000000000000000000000000000000000081565b6102546105593660046134da565b611b14565b61041461056c36600461301f565b611ba9565b61025461057f36600461349e565b611c8e565b61027f61059236600461351c565b611cef565b600360205281600052604060002081815481106105b357600080fd5b6000918252602090912001546001600160a01b0381169250600160a01b90046001600160601b0316905082565b60ff8216600090815260016020526040812054839061061a5760405162461bcd60e51b815260040161061190613579565b60405180910390fd5b60006106268585611e62565b5095945050505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561068e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106b291906135cc565b6001600160a01b0316336001600160a01b0316146106e25760405162461bcd60e51b8152600401610611906135e9565b846106fe8160ff16600090815260016020526040902054151590565b61071a5760405162461bcd60e51b815260040161061190613579565b83806107995760405162461bcd60e51b815260206004820152604260248201527f454f5374616b6552656769737472792e6d6f646966795374726174656779506160448201527f72616d733a206e6f20737472617465677920696e64696365732070726f766964606482015261195960f21b608482015260a401610611565b82811461080e5760405162461bcd60e51b815260206004820152603b60248201527f454f5374616b6552656769737472792e6d6f646966795374726174656779506160448201527f72616d733a20696e707574206c656e677468206d69736d6174636800000000006064820152608401610611565b60ff87166000908152600360205260408120905b8281101561095f5785858281811061083c5761083c61366c565b90506020020160208101906108519190613682565b828989848181106108645761086461366c565b905060200201358154811061087b5761087b61366c565b9060005260206000200160000160146101000a8154816001600160601b0302191690836001600160601b031602179055508860ff167f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75838a8a858181106108e4576108e461366c565b90506020020135815481106108fb576108fb61366c565b6000918252602090912001546001600160a01b03168888858181106109225761092261366c565b90506020020160208101906109379190613682565b604051610945929190612de5565b60405180910390a280610957816136b3565b915050610822565b505050505050505050565b606080336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146109b55760405162461bcd60e51b8152600401610611906136ce565b6000836001600160401b038111156109cf576109cf6130c3565b6040519080825280602002602001820160405280156109f8578160200160208202803683370190505b5090506000846001600160401b03811115610a1557610a156130c3565b604051908082528060200260200182016040528015610a3e578160200160208202803683370190505b50905060005b85811015610c2f576000878783818110610a6057610a6061366c565b919091013560f81c60008181526001602052604090205490925015159050610af05760405162461bcd60e51b815260206004820152603760248201527f454f5374616b6552656769737472792e72656769737465724f70657261746f7260448201527f3a2071756f72756d20646f6573206e6f742065786973740000000000000000006064820152608401610611565b600080610afd838d611e62565b9150915080610b9a5760405162461bcd60e51b815260206004820152605d60248201527f454f5374616b6552656769737472792e72656769737465724f70657261746f7260448201527f3a204f70657261746f7220646f6573206e6f74206d656574206d696e696d756d60648201527f207374616b6520726571756972656d656e7420666f722071756f72756d000000608482015260a401610611565b6000610ba78c8585612060565b905082878681518110610bbc57610bbc61366c565b60200260200101906001600160601b031690816001600160601b031681525050610be684826122e0565b868681518110610bf857610bf861366c565b60200260200101906001600160601b031690816001600160601b031681525050505050508080610c27906136b3565b915050610a44565b509097909650945050505050565b600082815260026020908152604080832060ff851684528252808320805482518185028101850190935280835260609492939192909184015b82821015610ccf576000848152602090819020604080516060810182529185015463ffffffff8082168452600160201b82041683850152600160401b90046001600160601b031690820152825260019092019101610c76565b5050505090505b92915050565b600080610ce98484611ba9565b60400151949350505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d7791906135cc565b6001600160a01b0316336001600160a01b031614610da75760405162461bcd60e51b8152600401610611906135e9565b81610dc38160ff16600090815260016020526040902054151590565b610ddf5760405162461bcd60e51b815260040161061190613579565b815180610e545760405162461bcd60e51b815260206004820152603f60248201527f454f5374616b6552656769737472792e72656d6f76655374726174656769657360448201527f3a206e6f20696e646963657320746f2072656d6f76652070726f7669646564006064820152608401610611565b60ff841660009081526003602090815260408083206004909252822090915b8381101561110c578660ff167f31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f784888481518110610eb357610eb361366c565b602002602001015181548110610ecb57610ecb61366c565b600091825260209182902001546040516001600160a01b0390911681520160405180910390a28660ff167f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a7584888481518110610f2957610f2961366c565b602002602001015181548110610f4157610f4161366c565b600091825260208083209190910154604080516001600160a01b039092168252918101929092520160405180910390a282548390610f8190600190613746565b81548110610f9157610f9161366c565b9060005260206000200183878381518110610fae57610fae61366c565b602002602001015181548110610fc657610fc661366c565b600091825260209091208254910180546001600160a01b0319166001600160a01b03909216918217815591546001600160601b03600160a01b91829004160217905582548390806110195761101961375d565b6000828152602081208201600019908101919091550190558154829061104190600190613746565b815481106110515761105161366c565b9060005260206000200160009054906101000a90046001600160a01b0316828783815181106110825761108261366c565b60200260200101518154811061109a5761109a61366c565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550818054806110d8576110d861375d565b600082815260209020810160001990810180546001600160a01b031916905501905580611104816136b3565b915050610e73565b50505050505050565b6000336001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000161461115f5760405162461bcd60e51b8152600401610611906136ce565b6000805b8381101561062657600085858381811061117f5761117f61366c565b919091013560f81c6000818152600160205260409020549092501515905061120f5760405162461bcd60e51b815260206004820152603a60248201527f454f5374616b6552656769737472792e7570646174654f70657261746f72537460448201527f616b653a2071756f72756d20646f6573206e6f742065786973740000000000006064820152608401610611565b60008061121c838b611e62565b915091508061123e5760009150600160ff84161b6001600160c01b0386161794505b600061124b8a8585612060565b905061125784826122e0565b50505050508080611267906136b3565b915050611163565b60606000826001600160401b0381111561128b5761128b6130c3565b6040519080825280602002602001820160405280156112b4578160200160208202803683370190505b50905060005b838110156115305760008585838181106112d6576112d661366c565b919091013560f81c600081815260016020526040902054909250151590506113775760405162461bcd60e51b815260206004820152604860248201527f454f5374616b6552656769737472792e676574546f74616c5374616b65496e6460448201527f696365734174426c6f636b4e756d6265723a2071756f72756d20646f6573206e6064820152671bdd08195e1a5cdd60c21b608482015260a401610611565b60ff81166000908152600160205260408120805463ffffffff8a1692906113a0576113a061366c565b60009182526020909120015463ffffffff16111561144c5760405162461bcd60e51b815260206004820152605d60248201527f454f5374616b6552656769737472792e676574546f74616c5374616b65496e6460448201527f696365734174426c6f636b4e756d6265723a2071756f72756d20686173206e6f60648201527f207374616b6520686973746f727920617420626c6f636b4e756d626572000000608482015260a401610611565b60ff8116600090815260016020526040812054905b8181101561151a5760ff8316600090815260016020819052604090912063ffffffff8b16916114908486613746565b61149a9190613746565b815481106114aa576114aa61366c565b60009182526020909120015463ffffffff16116115085760016114cd8284613746565b6114d79190613746565b8585815181106114e9576114e961366c565b602002602001019063ffffffff16908163ffffffff168152505061151a565b80611512816136b3565b915050611461565b5050508080611528906136b3565b9150506112ba565b5090505b9392505050565b6004602052816000526040600020818154811061155757600080fd5b6000918252602090912001546001600160a01b03169150829050565b60408051606081018252600080825260208083018290528284018290528582526002815283822060ff881683529052919091208054839081106115b8576115b861366c565b600091825260209182902060408051606081018252929091015463ffffffff8082168452600160201b82041693830193909352600160401b9092046001600160601b031691810191909152949350505050565b604080518082019091526000808252602082015260ff831660009081526003602052604090208054839081106116435761164361366c565b6000918252602091829020604080518082019091529101546001600160a01b0381168252600160a01b90046001600160601b0316918101919091529392505050565b604080516060810182526000808252602080830182905282840182905260ff8616825260019052919091208054839081106116c2576116c261366c565b600091825260209182902060408051606081018252929091015463ffffffff8082168452600160201b82041693830193909352600160401b9092046001600160601b0316918101919091529392505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611772573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061179691906135cc565b6001600160a01b0316336001600160a01b0316146117c65760405162461bcd60e51b8152600401610611906135e9565b816117e28160ff16600090815260016020526040902054151590565b6117fe5760405162461bcd60e51b815260040161061190613579565b611808838361245a565b505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146118555760405162461bcd60e51b8152600401610611906136ce565b60005b818110156119345760008383838181106118745761187461366c565b919091013560f81c600081815260016020526040902054909250151590506119045760405162461bcd60e51b815260206004820152603960248201527f454f5374616b6552656769737472792e646572656769737465724f706572617460448201527f6f723a2071756f72756d20646f6573206e6f74206578697374000000000000006064820152608401610611565b600061191286836000612060565b905061191e82826122e0565b505050808061192c906136b3565b915050611858565b50505050565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316638da5cb5b6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611998573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119bc91906135cc565b6001600160a01b0316336001600160a01b0316146119ec5760405162461bcd60e51b8152600401610611906135e9565b81611a088160ff16600090815260016020526040902054151590565b611a245760405162461bcd60e51b815260040161061190613579565b61180883836124c3565b60ff83166000908152600160205260408120805482919084908110611a5557611a5561366c565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b90930492909216908201529050610ce9818561290a565b60ff81166000908152600160208190526040822080549091611acd91613746565b81548110611add57611add61366c565b600091825260209091200154600160401b90046001600160601b031692915050565b6000611b0c848484612aa2565b949350505050565b600082815260026020908152604080832060ff881684529091528120805482919084908110611b4557611b4561366c565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b90930492909216908201529050611b9c818661290a565b6040015195945050505050565b6040805160608082018352600080835260208084018290528385018290528682526002815284822060ff87168352815284822054855193840186528284529083018290529382015290919081611c02579150610cd69050565b600085815260026020908152604080832060ff881684529091529020611c29600184613746565b81548110611c3957611c3961366c565b600091825260209182902060408051606081018252919092015463ffffffff8082168352600160201b820416938201939093526001600160601b03600160401b90930492909216908201529250610cd6915050565b600083815260026020908152604080832060ff861684529091528120611cb5858585612aa2565b63ffffffff1681548110611ccb57611ccb61366c565b600091825260209091200154600160401b90046001600160601b0316949350505050565b336001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614611d375760405162461bcd60e51b8152600401610611906136ce565b60ff831660009081526001602052604090205415611dbd5760405162461bcd60e51b815260206004820152603760248201527f454f5374616b6552656769737472792e696e697469616c697a6551756f72756d60448201527f3a2071756f72756d20616c7265616479206578697374730000000000000000006064820152608401610611565b611dc783826124c3565b611dd1838361245a565b505060ff166000908152600160208181526040808420815160608101835263ffffffff438116825281850187815293820187815283549687018455928752939095209451949093018054915193516001600160601b0316600160401b02600160401b600160a01b0319948416600160201b0267ffffffffffffffff1990931695909316949094171791909116179055565b600080600080611e818660ff1660009081526003602052604090205490565b604080518082019091526000808252602082015290915060ff871660009081526004602081905260408083209051639004134760e01b81526001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001692639004134792611ef6928c9201613773565b600060405180830381865afa158015611f13573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f3b91908101906137d2565b905060005b8381101561202c5760ff89166000908152600360205260409020805482908110611f6c57611f6c61366c565b60009182526020808320604080518082019091529201546001600160a01b0381168352600160a01b90046001600160601b0316908201528351909450839083908110611fba57611fba61366c565b6020026020010151111561201a57670de0b6b3a764000083602001516001600160601b0316838381518110611ff157611ff161366c565b60200260200101516120039190613862565b61200d9190613881565b61201790866138a3565b94505b80612024816136b3565b915050611f40565b50505060ff8616600090815260208190526040902054919350506001600160601b03908116908316101590505b9250929050565b600083815260026020908152604080832060ff8616845290915281205481908061212457600086815260026020908152604080832060ff891684528252808320815160608101835263ffffffff43811682528185018681526001600160601b03808c16958401958652845460018101865594885295909620915191909201805495519351909416600160401b02600160401b600160a01b0319938316600160201b0267ffffffffffffffff1990961691909216179390931716919091179055612286565b600086815260026020908152604080832060ff89168452909152812061214b600184613746565b8154811061215b5761215b61366c565b600091825260209091200180546001600160601b03600160401b9091048116945090915085168314156121945760009350505050611534565b80544363ffffffff908116911614156121ce578054600160401b600160a01b031916600160401b6001600160601b03871602178155612284565b805467ffffffff000000001916600160201b4363ffffffff90811682810293909317845560008a815260026020908152604080832060ff8d168452825280832081516060810183529687528683018481526001600160601b038d81169389019384528254600181018455928652939094209651960180549351915196851667ffffffffffffffff1990941693909317931690930291909117600160401b600160a01b031916600160401b93909216929092021790555b505b6040805160ff871681526001600160601b038616602082015287917f2f527d527e95d8fe40aec55377743bb779087da3f6d0d08f12e36444da62327d910160405180910390a26122d68285612d44565b9695505050505050565b60ff8216600090815260016020819052604082208054918391906123049084613746565b815481106123145761231461366c565b90600052602060002001905083600014156123435754600160401b90046001600160601b03169150610cd69050565b805460009061236290600160401b90046001600160601b031686612d5c565b82549091504363ffffffff9081169116141561239f578154600160401b600160a01b031916600160401b6001600160601b03831602178255612451565b815463ffffffff438116600160201b81810267ffffffff000000001990941693909317855560ff8916600090815260016020818152604080842081516060810183529586528583018581526001600160601b03808b169388019384528254958601835591865292909420945194909201805491519251909316600160401b02600160401b600160a01b031992861690960267ffffffffffffffff19909116939094169290921792909217169190911790555b95945050505050565b60ff82166000818152602081815260409182902080546bffffffffffffffffffffffff19166001600160601b03861690811790915591519182527f26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf910160405180910390a25050565b60008151116125285760405162461bcd60e51b815260206004820152603a602482015260008051602061396b83398151915260448201527f6d733a206e6f20737472617465676965732070726f76696465640000000000006064820152608401610611565b805160ff83166000908152600360209081526040909120549061254b83836138ce565b11156125bd5760405162461bcd60e51b8152602060048201526047602482015260008051602061396b83398151915260448201527f6d733a20657863656564204d41585f5745494748494e475f46554e4354494f4e6064820152660be988a9c8ea8960cb1b608482015260a401610611565b60005b828110156129035760005b6125d582846138ce565b8110156126b6578482815181106125ee576125ee61366c565b6020026020010151600001516001600160a01b0316600360008860ff1660ff168152602001908152602001600020828154811061262d5761262d61366c565b6000918252602090912001546001600160a01b031614156126a45760405162461bcd60e51b815260206004820152603f602482015260008051602061396b83398151915260448201527f6d733a2063616e6e6f74206164642073616d65207374726174656779203278006064820152608401610611565b806126ae816136b3565b9150506125cb565b5060008482815181106126cb576126cb61366c565b6020026020010151602001516001600160601b0316116127525760405162461bcd60e51b8152602060048201526048602482015260008051602061396b83398151915260448201527f6d733a2063616e6e6f74206164642073747261746567792077697468207a65726064820152671bc81dd95a59da1d60c21b608482015260a401610611565b60ff8516600090815260036020526040902084518590839081106127785761277861366c565b602090810291909101810151825460018101845560009384528284208251928401516001600160601b0316600160a01b026001600160a01b039093169290921791015560ff87168252600490526040902084518590839081106127dd576127dd61366c565b6020908102919091018101515182546001810184556000938452919092200180546001600160a01b0319166001600160a01b03909216919091179055835160ff8616907f10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404908690849081106128545761285461366c565b602090810291909101810151516040516001600160a01b0390911681520160405180910390a28460ff167f11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a758583815181106128b1576128b161366c565b6020026020010151600001518684815181106128cf576128cf61366c565b6020026020010151602001516040516128e9929190612de5565b60405180910390a2806128fb816136b3565b9150506125c0565b5050505050565b816000015163ffffffff168163ffffffff1610156129c15760405162461bcd60e51b815260206004820152606260248201527f454f5374616b6552656769737472792e5f76616c69646174654f70657261746f60448201527f725374616b654174426c6f636b4e756d6265723a206f70657261746f7253746160648201527f6b655570646174652069732066726f6d20616674657220626c6f636b4e756d6260848201526132b960f11b60a482015260c401610611565b602082015163ffffffff1615806129e75750816020015163ffffffff168163ffffffff16105b612a9e5760405162461bcd60e51b815260206004820152607660248201527f454f5374616b6552656769737472792e5f76616c69646174654f70657261746f60448201527f725374616b654174426c6f636b4e756d6265723a20746865726520697320612060648201527f6e65776572206f70657261746f725374616b6555706461746520617661696c61608482015275313632903132b337b93290313637b1b5a73ab6b132b960511b60a482015260c401610611565b5050565b600083815260026020908152604080832060ff86168452909152812054815b81811015612c7d57600086815260026020908152604080832060ff89168452909152902063ffffffff8516906001612af98486613746565b612b039190613746565b81548110612b1357612b1361366c565b60009182526020909120015463ffffffff1611612c6b57600086815260026020908152604080832060ff8916845290915281206001612b528486613746565b612b5c9190613746565b81548110612b6c57612b6c61366c565b600091825260209091200154600160201b900463ffffffff169050801580612b9f57508463ffffffff168163ffffffff16115b612c4b5760405162461bcd60e51b815260206004820152606b60248201527f454f5374616b6552656769737472792e5f6765745374616b655570646174654960448201527f6e646578466f724f70657261746f724174426c6f636b4e756d6265723a206f7060648201527f657261746f72496420686173206e6f207374616b65207570646174652061742060848201526a313637b1b5a73ab6b132b960a91b60a482015260c401610611565b6001612c578385613746565b612c619190613746565b9350505050611534565b80612c75816136b3565b915050612ac1565b5060405162461bcd60e51b815260206004820152608360248201527f454f5374616b6552656769737472792e5f6765745374616b655570646174654960448201527f6e646578466f724f70657261746f724174426c6f636b4e756d6265723a206e6f60648201527f207374616b652075706461746520666f756e6420666f72206f70657261746f7260848201527f496420616e642071756f72756d4e756d62657220617420626c6f636b206e756d60a4820152623132b960e91b60c482015260e401610611565b60006115346001600160601b038085169084166138e6565b600080821215612d8057612d6f82613925565b612d799084613942565b9050610cd6565b612d7982846138a3565b803560ff81168114612d9b57600080fd5b919050565b600060208284031215612db257600080fd5b61153482612d8a565b60008060408385031215612dce57600080fd5b612dd783612d8a565b946020939093013593505050565b6001600160a01b039290921682526001600160601b0316602082015260400190565b6001600160a01b0381168114612e1c57600080fd5b50565b60008060408385031215612e3257600080fd5b612e3b83612d8a565b91506020830135612e4b81612e07565b809150509250929050565b60008083601f840112612e6857600080fd5b5081356001600160401b03811115612e7f57600080fd5b6020830191508360208260051b850101111561205957600080fd5b600080600080600060608688031215612eb257600080fd5b612ebb86612d8a565b945060208601356001600160401b0380821115612ed757600080fd5b612ee389838a01612e56565b90965094506040880135915080821115612efc57600080fd5b50612f0988828901612e56565b969995985093965092949392505050565b60008083601f840112612f2c57600080fd5b5081356001600160401b03811115612f4357600080fd5b60208301915083602082850101111561205957600080fd5b60008060008060608587031215612f7157600080fd5b8435612f7c81612e07565b93506020850135925060408501356001600160401b03811115612f9e57600080fd5b612faa87828801612f1a565b95989497509550505050565b600081518084526020808501945080840160005b83811015612fef5781516001600160601b031687529582019590820190600101612fca565b509495945050505050565b60408152600061300d6040830185612fb6565b82810360208401526124518185612fb6565b6000806040838503121561303257600080fd5b8235915061304260208401612d8a565b90509250929050565b6020808252825182820181905260009190848201906040850190845b818110156130b7576130a483855163ffffffff808251168352806020830151166020840152506001600160601b0360408201511660408301525050565b9284019260609290920191600101613067565b50909695505050505050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156130fb576130fb6130c3565b60405290565b604051601f8201601f191681016001600160401b0381118282101715613129576131296130c3565b604052919050565b60006001600160401b0382111561314a5761314a6130c3565b5060051b60200190565b6000806040838503121561316757600080fd5b61317083612d8a565b91506020808401356001600160401b0381111561318c57600080fd5b8401601f8101861361319d57600080fd5b80356131b06131ab82613131565b613101565b81815260059190911b820183019083810190888311156131cf57600080fd5b928401925b828410156131ed578335825292840192908401906131d4565b80955050505050509250929050565b803563ffffffff81168114612d9b57600080fd5b60008060006040848603121561322557600080fd5b61322e846131fc565b925060208401356001600160401b0381111561324957600080fd5b61325586828701612f1a565b9497909650939450505050565b6020808252825182820181905260009190848201906040850190845b818110156130b757835163ffffffff168352928401929184019160010161327e565b6000806000606084860312156132b557600080fd5b6132be84612d8a565b95602085013595506040909401359392505050565b815163ffffffff9081168252602080840151909116908201526040808301516001600160601b03169082015260608101610cd6565b80356001600160601b0381168114612d9b57600080fd5b6000806040838503121561333257600080fd5b61333b83612d8a565b915061304260208401613308565b60008060006040848603121561335e57600080fd5b8335925060208401356001600160401b0381111561324957600080fd5b600082601f83011261338c57600080fd5b8135602061339c6131ab83613131565b82815260069290921b840181019181810190868411156133bb57600080fd5b8286015b8481101561340a57604081890312156133d85760008081fd5b6133e06130d9565b81356133eb81612e07565b81526133f8828601613308565b818601528352918301916040016133bf565b509695505050505050565b6000806040838503121561342857600080fd5b61343183612d8a565b915060208301356001600160401b0381111561344c57600080fd5b6134588582860161337b565b9150509250929050565b60008060006060848603121561347757600080fd5b61348084612d8a565b925061348e602085016131fc565b9150604084013590509250925092565b6000806000606084860312156134b357600080fd5b833592506134c360208501612d8a565b91506134d1604085016131fc565b90509250925092565b600080600080608085870312156134f057600080fd5b6134f985612d8a565b9350613507602086016131fc565b93969395505050506040820135916060013590565b60008060006060848603121561353157600080fd5b61353a84612d8a565b925061354860208501613308565b915060408401356001600160401b0381111561356357600080fd5b61356f8682870161337b565b9150509250925092565b60208082526033908201527f454f5374616b6552656769737472792e71756f72756d4578697374733a2071756040820152721bdc9d5b48191bd95cc81b9bdd08195e1a5cdd606a1b606082015260800190565b6000602082840312156135de57600080fd5b815161153481612e07565b60208082526058908201527f454f5374616b6552656769737472792e6f6e6c79436f6f7264696e61746f724f60408201527f776e65723a2063616c6c6572206973206e6f7420746865206f776e6572206f6660608201527f20746865207265676973747279436f6f7264696e61746f720000000000000000608082015260a00190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561369457600080fd5b61153482613308565b634e487b7160e01b600052601160045260246000fd5b60006000198214156136c7576136c761369d565b5060010190565b60208082526052908201527f454f5374616b6552656769737472792e6f6e6c79454f5265676973747279436f60408201527f6f7264696e61746f723a2063616c6c6572206973206e6f742074686520454f5260608201527132b3b4b9ba393ca1b7b7b93234b730ba37b960711b608082015260a00190565b6000828210156137585761375861369d565b500390565b634e487b7160e01b600052603160045260246000fd5b60006040820160018060a01b03808616845260206040818601528286548085526060870191508760005282600020945060005b818110156137c45785548516835260019586019592840192016137a6565b509098975050505050505050565b600060208083850312156137e557600080fd5b82516001600160401b038111156137fb57600080fd5b8301601f8101851361380c57600080fd5b805161381a6131ab82613131565b81815260059190911b8201830190838101908783111561383957600080fd5b928401925b828410156138575783518252928401929084019061383e565b979650505050505050565b600081600019048311821515161561387c5761387c61369d565b500290565b60008261389e57634e487b7160e01b600052601260045260246000fd5b500490565b60006001600160601b038083168185168083038211156138c5576138c561369d565b01949350505050565b600082198211156138e1576138e161369d565b500190565b60008083128015600160ff1b8501841216156139045761390461369d565b6001600160ff1b038401831381161561391f5761391f61369d565b50500390565b6000600160ff1b82141561393b5761393b61369d565b5060000390565b60006001600160601b03838116908316818110156139625761396261369d565b03939250505056fe454f5374616b6552656769737472792e5f616464537472617465677950617261a2646970667358221220080eb705be96969b049b8e0248a4a98678b64c4fe31c8cd20f26463d187d427764736f6c634300080c0033",
}

// ContractEOStakeRegistryABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractEOStakeRegistryMetaData.ABI instead.
var ContractEOStakeRegistryABI = ContractEOStakeRegistryMetaData.ABI

// ContractEOStakeRegistryBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractEOStakeRegistryMetaData.Bin instead.
var ContractEOStakeRegistryBin = ContractEOStakeRegistryMetaData.Bin

// DeployContractEOStakeRegistry deploys a new Ethereum contract, binding an instance of ContractEOStakeRegistry to it.
func DeployContractEOStakeRegistry(auth *bind.TransactOpts, backend bind.ContractBackend, _registryCoordinator common.Address, _delegationManager common.Address) (common.Address, *types.Transaction, *ContractEOStakeRegistry, error) {
	parsed, err := ContractEOStakeRegistryMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractEOStakeRegistryBin), backend, _registryCoordinator, _delegationManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractEOStakeRegistry{ContractEOStakeRegistryCaller: ContractEOStakeRegistryCaller{contract: contract}, ContractEOStakeRegistryTransactor: ContractEOStakeRegistryTransactor{contract: contract}, ContractEOStakeRegistryFilterer: ContractEOStakeRegistryFilterer{contract: contract}}, nil
}

// ContractEOStakeRegistryMethods is an auto generated interface around an Ethereum contract.
type ContractEOStakeRegistryMethods interface {
	ContractEOStakeRegistryCalls
	ContractEOStakeRegistryTransacts
	ContractEOStakeRegistryFilters
}

// ContractEOStakeRegistryCalls is an auto generated interface that defines the call methods available for an Ethereum contract.
type ContractEOStakeRegistryCalls interface {
	MAXWEIGHINGFUNCTIONLENGTH(opts *bind.CallOpts) (uint8, error)

	WEIGHTINGDIVISOR(opts *bind.CallOpts) (*big.Int, error)

	Delegation(opts *bind.CallOpts) (common.Address, error)

	GetCurrentStake(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (*big.Int, error)

	GetCurrentTotalStake(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error)

	GetLatestStakeUpdate(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (IEOStakeRegistryStakeUpdate, error)

	GetStakeAtBlockNumber(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error)

	GetStakeAtBlockNumberAndIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error)

	GetStakeHistory(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) ([]IEOStakeRegistryStakeUpdate, error)

	GetStakeHistoryLength(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (*big.Int, error)

	GetStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, operatorId [32]byte, index *big.Int) (IEOStakeRegistryStakeUpdate, error)

	GetStakeUpdateIndexAtBlockNumber(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error)

	GetTotalStakeAtBlockNumberFromIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error)

	GetTotalStakeHistoryLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error)

	GetTotalStakeIndicesAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, quorumNumbers []byte) ([]uint32, error)

	GetTotalStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (IEOStakeRegistryStakeUpdate, error)

	MinimumStakeForQuorum(opts *bind.CallOpts, arg0 uint8) (*big.Int, error)

	RegistryCoordinator(opts *bind.CallOpts) (common.Address, error)

	StrategiesPerQuorum(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (common.Address, error)

	StrategyParams(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (struct {
		Strategy   common.Address
		Multiplier *big.Int
	}, error)

	StrategyParamsByIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (IEOStakeRegistryStrategyParams, error)

	StrategyParamsLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error)

	WeightOfOperatorForQuorum(opts *bind.CallOpts, quorumNumber uint8, operator common.Address) (*big.Int, error)
}

// ContractEOStakeRegistryTransacts is an auto generated interface that defines the transact methods available for an Ethereum contract.
type ContractEOStakeRegistryTransacts interface {
	AddStrategies(opts *bind.TransactOpts, quorumNumber uint8, _strategyParams []IEOStakeRegistryStrategyParams) (*types.Transaction, error)

	DeregisterOperator(opts *bind.TransactOpts, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error)

	InitializeQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int, _strategyParams []IEOStakeRegistryStrategyParams) (*types.Transaction, error)

	ModifyStrategyParams(opts *bind.TransactOpts, quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error)

	RegisterOperator(opts *bind.TransactOpts, operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error)

	RemoveStrategies(opts *bind.TransactOpts, quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error)

	SetMinimumStakeForQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error)

	UpdateOperatorStake(opts *bind.TransactOpts, operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error)
}

// ContractEOStakeRegistryFilterer is an auto generated interface that defines the log filtering methods available for an Ethereum contract.
type ContractEOStakeRegistryFilters interface {
	FilterMinimumStakeForQuorumUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractEOStakeRegistryMinimumStakeForQuorumUpdatedIterator, error)
	WatchMinimumStakeForQuorumUpdated(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryMinimumStakeForQuorumUpdated, quorumNumber []uint8) (event.Subscription, error)
	ParseMinimumStakeForQuorumUpdated(log types.Log) (*ContractEOStakeRegistryMinimumStakeForQuorumUpdated, error)

	FilterOperatorStakeUpdate(opts *bind.FilterOpts, operatorId [][32]byte) (*ContractEOStakeRegistryOperatorStakeUpdateIterator, error)
	WatchOperatorStakeUpdate(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryOperatorStakeUpdate, operatorId [][32]byte) (event.Subscription, error)
	ParseOperatorStakeUpdate(log types.Log) (*ContractEOStakeRegistryOperatorStakeUpdate, error)

	FilterQuorumCreated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractEOStakeRegistryQuorumCreatedIterator, error)
	WatchQuorumCreated(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryQuorumCreated, quorumNumber []uint8) (event.Subscription, error)
	ParseQuorumCreated(log types.Log) (*ContractEOStakeRegistryQuorumCreated, error)

	FilterStrategyAddedToQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractEOStakeRegistryStrategyAddedToQuorumIterator, error)
	WatchStrategyAddedToQuorum(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryStrategyAddedToQuorum, quorumNumber []uint8) (event.Subscription, error)
	ParseStrategyAddedToQuorum(log types.Log) (*ContractEOStakeRegistryStrategyAddedToQuorum, error)

	FilterStrategyMultiplierUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractEOStakeRegistryStrategyMultiplierUpdatedIterator, error)
	WatchStrategyMultiplierUpdated(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryStrategyMultiplierUpdated, quorumNumber []uint8) (event.Subscription, error)
	ParseStrategyMultiplierUpdated(log types.Log) (*ContractEOStakeRegistryStrategyMultiplierUpdated, error)

	FilterStrategyRemovedFromQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractEOStakeRegistryStrategyRemovedFromQuorumIterator, error)
	WatchStrategyRemovedFromQuorum(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryStrategyRemovedFromQuorum, quorumNumber []uint8) (event.Subscription, error)
	ParseStrategyRemovedFromQuorum(log types.Log) (*ContractEOStakeRegistryStrategyRemovedFromQuorum, error)
}

// ContractEOStakeRegistry is an auto generated Go binding around an Ethereum contract.
type ContractEOStakeRegistry struct {
	ContractEOStakeRegistryCaller     // Read-only binding to the contract
	ContractEOStakeRegistryTransactor // Write-only binding to the contract
	ContractEOStakeRegistryFilterer   // Log filterer for contract events
}

// ContractEOStakeRegistry implements the ContractEOStakeRegistryMethods interface.
var _ ContractEOStakeRegistryMethods = (*ContractEOStakeRegistry)(nil)

// ContractEOStakeRegistryCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractEOStakeRegistryCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractEOStakeRegistryCaller implements the ContractEOStakeRegistryCalls interface.
var _ ContractEOStakeRegistryCalls = (*ContractEOStakeRegistryCaller)(nil)

// ContractEOStakeRegistryTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractEOStakeRegistryTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractEOStakeRegistryTransactor implements the ContractEOStakeRegistryTransacts interface.
var _ ContractEOStakeRegistryTransacts = (*ContractEOStakeRegistryTransactor)(nil)

// ContractEOStakeRegistryFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractEOStakeRegistryFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractEOStakeRegistryFilterer implements the ContractEOStakeRegistryFilters interface.
var _ ContractEOStakeRegistryFilters = (*ContractEOStakeRegistryFilterer)(nil)

// ContractEOStakeRegistrySession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractEOStakeRegistrySession struct {
	Contract     *ContractEOStakeRegistry // Generic contract binding to set the session for
	CallOpts     bind.CallOpts            // Call options to use throughout this session
	TransactOpts bind.TransactOpts        // Transaction auth options to use throughout this session
}

// ContractEOStakeRegistryCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractEOStakeRegistryCallerSession struct {
	Contract *ContractEOStakeRegistryCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                  // Call options to use throughout this session
}

// ContractEOStakeRegistryTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractEOStakeRegistryTransactorSession struct {
	Contract     *ContractEOStakeRegistryTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                  // Transaction auth options to use throughout this session
}

// ContractEOStakeRegistryRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractEOStakeRegistryRaw struct {
	Contract *ContractEOStakeRegistry // Generic contract binding to access the raw methods on
}

// ContractEOStakeRegistryCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractEOStakeRegistryCallerRaw struct {
	Contract *ContractEOStakeRegistryCaller // Generic read-only contract binding to access the raw methods on
}

// ContractEOStakeRegistryTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractEOStakeRegistryTransactorRaw struct {
	Contract *ContractEOStakeRegistryTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractEOStakeRegistry creates a new instance of ContractEOStakeRegistry, bound to a specific deployed contract.
func NewContractEOStakeRegistry(address common.Address, backend bind.ContractBackend) (*ContractEOStakeRegistry, error) {
	contract, err := bindContractEOStakeRegistry(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractEOStakeRegistry{ContractEOStakeRegistryCaller: ContractEOStakeRegistryCaller{contract: contract}, ContractEOStakeRegistryTransactor: ContractEOStakeRegistryTransactor{contract: contract}, ContractEOStakeRegistryFilterer: ContractEOStakeRegistryFilterer{contract: contract}}, nil
}

// NewContractEOStakeRegistryCaller creates a new read-only instance of ContractEOStakeRegistry, bound to a specific deployed contract.
func NewContractEOStakeRegistryCaller(address common.Address, caller bind.ContractCaller) (*ContractEOStakeRegistryCaller, error) {
	contract, err := bindContractEOStakeRegistry(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractEOStakeRegistryCaller{contract: contract}, nil
}

// NewContractEOStakeRegistryTransactor creates a new write-only instance of ContractEOStakeRegistry, bound to a specific deployed contract.
func NewContractEOStakeRegistryTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractEOStakeRegistryTransactor, error) {
	contract, err := bindContractEOStakeRegistry(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractEOStakeRegistryTransactor{contract: contract}, nil
}

// NewContractEOStakeRegistryFilterer creates a new log filterer instance of ContractEOStakeRegistry, bound to a specific deployed contract.
func NewContractEOStakeRegistryFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractEOStakeRegistryFilterer, error) {
	contract, err := bindContractEOStakeRegistry(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractEOStakeRegistryFilterer{contract: contract}, nil
}

// bindContractEOStakeRegistry binds a generic wrapper to an already deployed contract.
func bindContractEOStakeRegistry(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractEOStakeRegistryMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractEOStakeRegistry *ContractEOStakeRegistryRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractEOStakeRegistry.Contract.ContractEOStakeRegistryCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractEOStakeRegistry *ContractEOStakeRegistryRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.ContractEOStakeRegistryTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractEOStakeRegistry *ContractEOStakeRegistryRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.ContractEOStakeRegistryTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractEOStakeRegistry.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.contract.Transact(opts, method, params...)
}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) MAXWEIGHINGFUNCTIONLENGTH(opts *bind.CallOpts) (uint8, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "MAX_WEIGHING_FUNCTION_LENGTH")

	if err != nil {
		return *new(uint8), err
	}

	out0 := *abi.ConvertType(out[0], new(uint8)).(*uint8)

	return out0, err

}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) MAXWEIGHINGFUNCTIONLENGTH() (uint8, error) {
	return _ContractEOStakeRegistry.Contract.MAXWEIGHINGFUNCTIONLENGTH(&_ContractEOStakeRegistry.CallOpts)
}

// MAXWEIGHINGFUNCTIONLENGTH is a free data retrieval call binding the contract method 0x7c172347.
//
// Solidity: function MAX_WEIGHING_FUNCTION_LENGTH() view returns(uint8)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) MAXWEIGHINGFUNCTIONLENGTH() (uint8, error) {
	return _ContractEOStakeRegistry.Contract.MAXWEIGHINGFUNCTIONLENGTH(&_ContractEOStakeRegistry.CallOpts)
}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) WEIGHTINGDIVISOR(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "WEIGHTING_DIVISOR")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) WEIGHTINGDIVISOR() (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.WEIGHTINGDIVISOR(&_ContractEOStakeRegistry.CallOpts)
}

// WEIGHTINGDIVISOR is a free data retrieval call binding the contract method 0x5e5a6775.
//
// Solidity: function WEIGHTING_DIVISOR() view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) WEIGHTINGDIVISOR() (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.WEIGHTINGDIVISOR(&_ContractEOStakeRegistry.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) Delegation(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "delegation")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) Delegation() (common.Address, error) {
	return _ContractEOStakeRegistry.Contract.Delegation(&_ContractEOStakeRegistry.CallOpts)
}

// Delegation is a free data retrieval call binding the contract method 0xdf5cf723.
//
// Solidity: function delegation() view returns(address)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) Delegation() (common.Address, error) {
	return _ContractEOStakeRegistry.Contract.Delegation(&_ContractEOStakeRegistry.CallOpts)
}

// GetCurrentStake is a free data retrieval call binding the contract method 0x5401ed27.
//
// Solidity: function getCurrentStake(bytes32 operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetCurrentStake(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getCurrentStake", operatorId, quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentStake is a free data retrieval call binding the contract method 0x5401ed27.
//
// Solidity: function getCurrentStake(bytes32 operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetCurrentStake(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetCurrentStake(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetCurrentStake is a free data retrieval call binding the contract method 0x5401ed27.
//
// Solidity: function getCurrentStake(bytes32 operatorId, uint8 quorumNumber) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetCurrentStake(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetCurrentStake(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetCurrentTotalStake is a free data retrieval call binding the contract method 0xd5eccc05.
//
// Solidity: function getCurrentTotalStake(uint8 quorumNumber) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetCurrentTotalStake(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getCurrentTotalStake", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetCurrentTotalStake is a free data retrieval call binding the contract method 0xd5eccc05.
//
// Solidity: function getCurrentTotalStake(uint8 quorumNumber) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetCurrentTotalStake(quorumNumber uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetCurrentTotalStake(&_ContractEOStakeRegistry.CallOpts, quorumNumber)
}

// GetCurrentTotalStake is a free data retrieval call binding the contract method 0xd5eccc05.
//
// Solidity: function getCurrentTotalStake(uint8 quorumNumber) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetCurrentTotalStake(quorumNumber uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetCurrentTotalStake(&_ContractEOStakeRegistry.CallOpts, quorumNumber)
}

// GetLatestStakeUpdate is a free data retrieval call binding the contract method 0xf851e198.
//
// Solidity: function getLatestStakeUpdate(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetLatestStakeUpdate(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (IEOStakeRegistryStakeUpdate, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getLatestStakeUpdate", operatorId, quorumNumber)

	if err != nil {
		return *new(IEOStakeRegistryStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IEOStakeRegistryStakeUpdate)).(*IEOStakeRegistryStakeUpdate)

	return out0, err

}

// GetLatestStakeUpdate is a free data retrieval call binding the contract method 0xf851e198.
//
// Solidity: function getLatestStakeUpdate(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetLatestStakeUpdate(operatorId [32]byte, quorumNumber uint8) (IEOStakeRegistryStakeUpdate, error) {
	return _ContractEOStakeRegistry.Contract.GetLatestStakeUpdate(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetLatestStakeUpdate is a free data retrieval call binding the contract method 0xf851e198.
//
// Solidity: function getLatestStakeUpdate(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetLatestStakeUpdate(operatorId [32]byte, quorumNumber uint8) (IEOStakeRegistryStakeUpdate, error) {
	return _ContractEOStakeRegistry.Contract.GetLatestStakeUpdate(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeAtBlockNumber is a free data retrieval call binding the contract method 0xfa28c627.
//
// Solidity: function getStakeAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetStakeAtBlockNumber(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getStakeAtBlockNumber", operatorId, quorumNumber, blockNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeAtBlockNumber is a free data retrieval call binding the contract method 0xfa28c627.
//
// Solidity: function getStakeAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetStakeAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeAtBlockNumber(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeAtBlockNumber is a free data retrieval call binding the contract method 0xfa28c627.
//
// Solidity: function getStakeAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetStakeAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeAtBlockNumber(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeAtBlockNumberAndIndex is a free data retrieval call binding the contract method 0xf2be94ae.
//
// Solidity: function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetStakeAtBlockNumberAndIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getStakeAtBlockNumberAndIndex", quorumNumber, blockNumber, operatorId, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeAtBlockNumberAndIndex is a free data retrieval call binding the contract method 0xf2be94ae.
//
// Solidity: function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetStakeAtBlockNumberAndIndex(quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeAtBlockNumberAndIndex(&_ContractEOStakeRegistry.CallOpts, quorumNumber, blockNumber, operatorId, index)
}

// GetStakeAtBlockNumberAndIndex is a free data retrieval call binding the contract method 0xf2be94ae.
//
// Solidity: function getStakeAtBlockNumberAndIndex(uint8 quorumNumber, uint32 blockNumber, bytes32 operatorId, uint256 index) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetStakeAtBlockNumberAndIndex(quorumNumber uint8, blockNumber uint32, operatorId [32]byte, index *big.Int) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeAtBlockNumberAndIndex(&_ContractEOStakeRegistry.CallOpts, quorumNumber, blockNumber, operatorId, index)
}

// GetStakeHistory is a free data retrieval call binding the contract method 0x2cd95940.
//
// Solidity: function getStakeHistory(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetStakeHistory(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) ([]IEOStakeRegistryStakeUpdate, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getStakeHistory", operatorId, quorumNumber)

	if err != nil {
		return *new([]IEOStakeRegistryStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new([]IEOStakeRegistryStakeUpdate)).(*[]IEOStakeRegistryStakeUpdate)

	return out0, err

}

// GetStakeHistory is a free data retrieval call binding the contract method 0x2cd95940.
//
// Solidity: function getStakeHistory(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetStakeHistory(operatorId [32]byte, quorumNumber uint8) ([]IEOStakeRegistryStakeUpdate, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeHistory(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeHistory is a free data retrieval call binding the contract method 0x2cd95940.
//
// Solidity: function getStakeHistory(bytes32 operatorId, uint8 quorumNumber) view returns((uint32,uint32,uint96)[])
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetStakeHistory(operatorId [32]byte, quorumNumber uint8) ([]IEOStakeRegistryStakeUpdate, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeHistory(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeHistoryLength is a free data retrieval call binding the contract method 0x4bd26e09.
//
// Solidity: function getStakeHistoryLength(bytes32 operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetStakeHistoryLength(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getStakeHistoryLength", operatorId, quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetStakeHistoryLength is a free data retrieval call binding the contract method 0x4bd26e09.
//
// Solidity: function getStakeHistoryLength(bytes32 operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetStakeHistoryLength(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeHistoryLength(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeHistoryLength is a free data retrieval call binding the contract method 0x4bd26e09.
//
// Solidity: function getStakeHistoryLength(bytes32 operatorId, uint8 quorumNumber) view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetStakeHistoryLength(operatorId [32]byte, quorumNumber uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeHistoryLength(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber)
}

// GetStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xac6bfb03.
//
// Solidity: function getStakeUpdateAtIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, operatorId [32]byte, index *big.Int) (IEOStakeRegistryStakeUpdate, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getStakeUpdateAtIndex", quorumNumber, operatorId, index)

	if err != nil {
		return *new(IEOStakeRegistryStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IEOStakeRegistryStakeUpdate)).(*IEOStakeRegistryStakeUpdate)

	return out0, err

}

// GetStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xac6bfb03.
//
// Solidity: function getStakeUpdateAtIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetStakeUpdateAtIndex(quorumNumber uint8, operatorId [32]byte, index *big.Int) (IEOStakeRegistryStakeUpdate, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeUpdateAtIndex(&_ContractEOStakeRegistry.CallOpts, quorumNumber, operatorId, index)
}

// GetStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xac6bfb03.
//
// Solidity: function getStakeUpdateAtIndex(uint8 quorumNumber, bytes32 operatorId, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetStakeUpdateAtIndex(quorumNumber uint8, operatorId [32]byte, index *big.Int) (IEOStakeRegistryStakeUpdate, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeUpdateAtIndex(&_ContractEOStakeRegistry.CallOpts, quorumNumber, operatorId, index)
}

// GetStakeUpdateIndexAtBlockNumber is a free data retrieval call binding the contract method 0xdd9846b9.
//
// Solidity: function getStakeUpdateIndexAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetStakeUpdateIndexAtBlockNumber(opts *bind.CallOpts, operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getStakeUpdateIndexAtBlockNumber", operatorId, quorumNumber, blockNumber)

	if err != nil {
		return *new(uint32), err
	}

	out0 := *abi.ConvertType(out[0], new(uint32)).(*uint32)

	return out0, err

}

// GetStakeUpdateIndexAtBlockNumber is a free data retrieval call binding the contract method 0xdd9846b9.
//
// Solidity: function getStakeUpdateIndexAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetStakeUpdateIndexAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeUpdateIndexAtBlockNumber(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetStakeUpdateIndexAtBlockNumber is a free data retrieval call binding the contract method 0xdd9846b9.
//
// Solidity: function getStakeUpdateIndexAtBlockNumber(bytes32 operatorId, uint8 quorumNumber, uint32 blockNumber) view returns(uint32)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetStakeUpdateIndexAtBlockNumber(operatorId [32]byte, quorumNumber uint8, blockNumber uint32) (uint32, error) {
	return _ContractEOStakeRegistry.Contract.GetStakeUpdateIndexAtBlockNumber(&_ContractEOStakeRegistry.CallOpts, operatorId, quorumNumber, blockNumber)
}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetTotalStakeAtBlockNumberFromIndex(opts *bind.CallOpts, quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getTotalStakeAtBlockNumberFromIndex", quorumNumber, blockNumber, index)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetTotalStakeAtBlockNumberFromIndex(quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetTotalStakeAtBlockNumberFromIndex(&_ContractEOStakeRegistry.CallOpts, quorumNumber, blockNumber, index)
}

// GetTotalStakeAtBlockNumberFromIndex is a free data retrieval call binding the contract method 0xc8294c56.
//
// Solidity: function getTotalStakeAtBlockNumberFromIndex(uint8 quorumNumber, uint32 blockNumber, uint256 index) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetTotalStakeAtBlockNumberFromIndex(quorumNumber uint8, blockNumber uint32, index *big.Int) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetTotalStakeAtBlockNumberFromIndex(&_ContractEOStakeRegistry.CallOpts, quorumNumber, blockNumber, index)
}

// GetTotalStakeHistoryLength is a free data retrieval call binding the contract method 0x0491b41c.
//
// Solidity: function getTotalStakeHistoryLength(uint8 quorumNumber) view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetTotalStakeHistoryLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getTotalStakeHistoryLength", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// GetTotalStakeHistoryLength is a free data retrieval call binding the contract method 0x0491b41c.
//
// Solidity: function getTotalStakeHistoryLength(uint8 quorumNumber) view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetTotalStakeHistoryLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetTotalStakeHistoryLength(&_ContractEOStakeRegistry.CallOpts, quorumNumber)
}

// GetTotalStakeHistoryLength is a free data retrieval call binding the contract method 0x0491b41c.
//
// Solidity: function getTotalStakeHistoryLength(uint8 quorumNumber) view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetTotalStakeHistoryLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.GetTotalStakeHistoryLength(&_ContractEOStakeRegistry.CallOpts, quorumNumber)
}

// GetTotalStakeIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x81c07502.
//
// Solidity: function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetTotalStakeIndicesAtBlockNumber(opts *bind.CallOpts, blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getTotalStakeIndicesAtBlockNumber", blockNumber, quorumNumbers)

	if err != nil {
		return *new([]uint32), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint32)).(*[]uint32)

	return out0, err

}

// GetTotalStakeIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x81c07502.
//
// Solidity: function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetTotalStakeIndicesAtBlockNumber(blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	return _ContractEOStakeRegistry.Contract.GetTotalStakeIndicesAtBlockNumber(&_ContractEOStakeRegistry.CallOpts, blockNumber, quorumNumbers)
}

// GetTotalStakeIndicesAtBlockNumber is a free data retrieval call binding the contract method 0x81c07502.
//
// Solidity: function getTotalStakeIndicesAtBlockNumber(uint32 blockNumber, bytes quorumNumbers) view returns(uint32[])
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetTotalStakeIndicesAtBlockNumber(blockNumber uint32, quorumNumbers []byte) ([]uint32, error) {
	return _ContractEOStakeRegistry.Contract.GetTotalStakeIndicesAtBlockNumber(&_ContractEOStakeRegistry.CallOpts, blockNumber, quorumNumbers)
}

// GetTotalStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xb6904b78.
//
// Solidity: function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) GetTotalStakeUpdateAtIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (IEOStakeRegistryStakeUpdate, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "getTotalStakeUpdateAtIndex", quorumNumber, index)

	if err != nil {
		return *new(IEOStakeRegistryStakeUpdate), err
	}

	out0 := *abi.ConvertType(out[0], new(IEOStakeRegistryStakeUpdate)).(*IEOStakeRegistryStakeUpdate)

	return out0, err

}

// GetTotalStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xb6904b78.
//
// Solidity: function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) GetTotalStakeUpdateAtIndex(quorumNumber uint8, index *big.Int) (IEOStakeRegistryStakeUpdate, error) {
	return _ContractEOStakeRegistry.Contract.GetTotalStakeUpdateAtIndex(&_ContractEOStakeRegistry.CallOpts, quorumNumber, index)
}

// GetTotalStakeUpdateAtIndex is a free data retrieval call binding the contract method 0xb6904b78.
//
// Solidity: function getTotalStakeUpdateAtIndex(uint8 quorumNumber, uint256 index) view returns((uint32,uint32,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) GetTotalStakeUpdateAtIndex(quorumNumber uint8, index *big.Int) (IEOStakeRegistryStakeUpdate, error) {
	return _ContractEOStakeRegistry.Contract.GetTotalStakeUpdateAtIndex(&_ContractEOStakeRegistry.CallOpts, quorumNumber, index)
}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0xc46778a5.
//
// Solidity: function minimumStakeForQuorum(uint8 ) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) MinimumStakeForQuorum(opts *bind.CallOpts, arg0 uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "minimumStakeForQuorum", arg0)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0xc46778a5.
//
// Solidity: function minimumStakeForQuorum(uint8 ) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) MinimumStakeForQuorum(arg0 uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.MinimumStakeForQuorum(&_ContractEOStakeRegistry.CallOpts, arg0)
}

// MinimumStakeForQuorum is a free data retrieval call binding the contract method 0xc46778a5.
//
// Solidity: function minimumStakeForQuorum(uint8 ) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) MinimumStakeForQuorum(arg0 uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.MinimumStakeForQuorum(&_ContractEOStakeRegistry.CallOpts, arg0)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) RegistryCoordinator() (common.Address, error) {
	return _ContractEOStakeRegistry.Contract.RegistryCoordinator(&_ContractEOStakeRegistry.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractEOStakeRegistry.Contract.RegistryCoordinator(&_ContractEOStakeRegistry.CallOpts)
}

// StrategiesPerQuorum is a free data retrieval call binding the contract method 0x9f3ccf65.
//
// Solidity: function strategiesPerQuorum(uint8 , uint256 ) view returns(address)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) StrategiesPerQuorum(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (common.Address, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "strategiesPerQuorum", arg0, arg1)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StrategiesPerQuorum is a free data retrieval call binding the contract method 0x9f3ccf65.
//
// Solidity: function strategiesPerQuorum(uint8 , uint256 ) view returns(address)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) StrategiesPerQuorum(arg0 uint8, arg1 *big.Int) (common.Address, error) {
	return _ContractEOStakeRegistry.Contract.StrategiesPerQuorum(&_ContractEOStakeRegistry.CallOpts, arg0, arg1)
}

// StrategiesPerQuorum is a free data retrieval call binding the contract method 0x9f3ccf65.
//
// Solidity: function strategiesPerQuorum(uint8 , uint256 ) view returns(address)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) StrategiesPerQuorum(arg0 uint8, arg1 *big.Int) (common.Address, error) {
	return _ContractEOStakeRegistry.Contract.StrategiesPerQuorum(&_ContractEOStakeRegistry.CallOpts, arg0, arg1)
}

// StrategyParams is a free data retrieval call binding the contract method 0x08732461.
//
// Solidity: function strategyParams(uint8 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) StrategyParams(opts *bind.CallOpts, arg0 uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "strategyParams", arg0, arg1)

	outstruct := new(struct {
		Strategy   common.Address
		Multiplier *big.Int
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Strategy = *abi.ConvertType(out[0], new(common.Address)).(*common.Address)
	outstruct.Multiplier = *abi.ConvertType(out[1], new(*big.Int)).(**big.Int)

	return *outstruct, err

}

// StrategyParams is a free data retrieval call binding the contract method 0x08732461.
//
// Solidity: function strategyParams(uint8 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) StrategyParams(arg0 uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	return _ContractEOStakeRegistry.Contract.StrategyParams(&_ContractEOStakeRegistry.CallOpts, arg0, arg1)
}

// StrategyParams is a free data retrieval call binding the contract method 0x08732461.
//
// Solidity: function strategyParams(uint8 , uint256 ) view returns(address strategy, uint96 multiplier)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) StrategyParams(arg0 uint8, arg1 *big.Int) (struct {
	Strategy   common.Address
	Multiplier *big.Int
}, error) {
	return _ContractEOStakeRegistry.Contract.StrategyParams(&_ContractEOStakeRegistry.CallOpts, arg0, arg1)
}

// StrategyParamsByIndex is a free data retrieval call binding the contract method 0xadc804da.
//
// Solidity: function strategyParamsByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) StrategyParamsByIndex(opts *bind.CallOpts, quorumNumber uint8, index *big.Int) (IEOStakeRegistryStrategyParams, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "strategyParamsByIndex", quorumNumber, index)

	if err != nil {
		return *new(IEOStakeRegistryStrategyParams), err
	}

	out0 := *abi.ConvertType(out[0], new(IEOStakeRegistryStrategyParams)).(*IEOStakeRegistryStrategyParams)

	return out0, err

}

// StrategyParamsByIndex is a free data retrieval call binding the contract method 0xadc804da.
//
// Solidity: function strategyParamsByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) StrategyParamsByIndex(quorumNumber uint8, index *big.Int) (IEOStakeRegistryStrategyParams, error) {
	return _ContractEOStakeRegistry.Contract.StrategyParamsByIndex(&_ContractEOStakeRegistry.CallOpts, quorumNumber, index)
}

// StrategyParamsByIndex is a free data retrieval call binding the contract method 0xadc804da.
//
// Solidity: function strategyParamsByIndex(uint8 quorumNumber, uint256 index) view returns((address,uint96))
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) StrategyParamsByIndex(quorumNumber uint8, index *big.Int) (IEOStakeRegistryStrategyParams, error) {
	return _ContractEOStakeRegistry.Contract.StrategyParamsByIndex(&_ContractEOStakeRegistry.CallOpts, quorumNumber, index)
}

// StrategyParamsLength is a free data retrieval call binding the contract method 0x3ca5a5f5.
//
// Solidity: function strategyParamsLength(uint8 quorumNumber) view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) StrategyParamsLength(opts *bind.CallOpts, quorumNumber uint8) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "strategyParamsLength", quorumNumber)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// StrategyParamsLength is a free data retrieval call binding the contract method 0x3ca5a5f5.
//
// Solidity: function strategyParamsLength(uint8 quorumNumber) view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) StrategyParamsLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.StrategyParamsLength(&_ContractEOStakeRegistry.CallOpts, quorumNumber)
}

// StrategyParamsLength is a free data retrieval call binding the contract method 0x3ca5a5f5.
//
// Solidity: function strategyParamsLength(uint8 quorumNumber) view returns(uint256)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) StrategyParamsLength(quorumNumber uint8) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.StrategyParamsLength(&_ContractEOStakeRegistry.CallOpts, quorumNumber)
}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCaller) WeightOfOperatorForQuorum(opts *bind.CallOpts, quorumNumber uint8, operator common.Address) (*big.Int, error) {
	var out []interface{}
	err := _ContractEOStakeRegistry.contract.Call(opts, &out, "weightOfOperatorForQuorum", quorumNumber, operator)

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) WeightOfOperatorForQuorum(quorumNumber uint8, operator common.Address) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.WeightOfOperatorForQuorum(&_ContractEOStakeRegistry.CallOpts, quorumNumber, operator)
}

// WeightOfOperatorForQuorum is a free data retrieval call binding the contract method 0x1f9b74e0.
//
// Solidity: function weightOfOperatorForQuorum(uint8 quorumNumber, address operator) view returns(uint96)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryCallerSession) WeightOfOperatorForQuorum(quorumNumber uint8, operator common.Address) (*big.Int, error) {
	return _ContractEOStakeRegistry.Contract.WeightOfOperatorForQuorum(&_ContractEOStakeRegistry.CallOpts, quorumNumber, operator)
}

// AddStrategies is a paid mutator transaction binding the contract method 0xc601527d.
//
// Solidity: function addStrategies(uint8 quorumNumber, (address,uint96)[] _strategyParams) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactor) AddStrategies(opts *bind.TransactOpts, quorumNumber uint8, _strategyParams []IEOStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.contract.Transact(opts, "addStrategies", quorumNumber, _strategyParams)
}

// AddStrategies is a paid mutator transaction binding the contract method 0xc601527d.
//
// Solidity: function addStrategies(uint8 quorumNumber, (address,uint96)[] _strategyParams) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) AddStrategies(quorumNumber uint8, _strategyParams []IEOStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.AddStrategies(&_ContractEOStakeRegistry.TransactOpts, quorumNumber, _strategyParams)
}

// AddStrategies is a paid mutator transaction binding the contract method 0xc601527d.
//
// Solidity: function addStrategies(uint8 quorumNumber, (address,uint96)[] _strategyParams) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactorSession) AddStrategies(quorumNumber uint8, _strategyParams []IEOStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.AddStrategies(&_ContractEOStakeRegistry.TransactOpts, quorumNumber, _strategyParams)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xbd29b8cd.
//
// Solidity: function deregisterOperator(bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactor) DeregisterOperator(opts *bind.TransactOpts, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.contract.Transact(opts, "deregisterOperator", operatorId, quorumNumbers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xbd29b8cd.
//
// Solidity: function deregisterOperator(bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) DeregisterOperator(operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.DeregisterOperator(&_ContractEOStakeRegistry.TransactOpts, operatorId, quorumNumbers)
}

// DeregisterOperator is a paid mutator transaction binding the contract method 0xbd29b8cd.
//
// Solidity: function deregisterOperator(bytes32 operatorId, bytes quorumNumbers) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactorSession) DeregisterOperator(operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.DeregisterOperator(&_ContractEOStakeRegistry.TransactOpts, operatorId, quorumNumbers)
}

// InitializeQuorum is a paid mutator transaction binding the contract method 0xff694a77.
//
// Solidity: function initializeQuorum(uint8 quorumNumber, uint96 minimumStake, (address,uint96)[] _strategyParams) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactor) InitializeQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int, _strategyParams []IEOStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.contract.Transact(opts, "initializeQuorum", quorumNumber, minimumStake, _strategyParams)
}

// InitializeQuorum is a paid mutator transaction binding the contract method 0xff694a77.
//
// Solidity: function initializeQuorum(uint8 quorumNumber, uint96 minimumStake, (address,uint96)[] _strategyParams) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) InitializeQuorum(quorumNumber uint8, minimumStake *big.Int, _strategyParams []IEOStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.InitializeQuorum(&_ContractEOStakeRegistry.TransactOpts, quorumNumber, minimumStake, _strategyParams)
}

// InitializeQuorum is a paid mutator transaction binding the contract method 0xff694a77.
//
// Solidity: function initializeQuorum(uint8 quorumNumber, uint96 minimumStake, (address,uint96)[] _strategyParams) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactorSession) InitializeQuorum(quorumNumber uint8, minimumStake *big.Int, _strategyParams []IEOStakeRegistryStrategyParams) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.InitializeQuorum(&_ContractEOStakeRegistry.TransactOpts, quorumNumber, minimumStake, _strategyParams)
}

// ModifyStrategyParams is a paid mutator transaction binding the contract method 0x20b66298.
//
// Solidity: function modifyStrategyParams(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactor) ModifyStrategyParams(opts *bind.TransactOpts, quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.contract.Transact(opts, "modifyStrategyParams", quorumNumber, strategyIndices, newMultipliers)
}

// ModifyStrategyParams is a paid mutator transaction binding the contract method 0x20b66298.
//
// Solidity: function modifyStrategyParams(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) ModifyStrategyParams(quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.ModifyStrategyParams(&_ContractEOStakeRegistry.TransactOpts, quorumNumber, strategyIndices, newMultipliers)
}

// ModifyStrategyParams is a paid mutator transaction binding the contract method 0x20b66298.
//
// Solidity: function modifyStrategyParams(uint8 quorumNumber, uint256[] strategyIndices, uint96[] newMultipliers) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactorSession) ModifyStrategyParams(quorumNumber uint8, strategyIndices []*big.Int, newMultipliers []*big.Int) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.ModifyStrategyParams(&_ContractEOStakeRegistry.TransactOpts, quorumNumber, strategyIndices, newMultipliers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x25504777.
//
// Solidity: function registerOperator(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint96[], uint96[])
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactor) RegisterOperator(opts *bind.TransactOpts, operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.contract.Transact(opts, "registerOperator", operator, operatorId, quorumNumbers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x25504777.
//
// Solidity: function registerOperator(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint96[], uint96[])
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) RegisterOperator(operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.RegisterOperator(&_ContractEOStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// RegisterOperator is a paid mutator transaction binding the contract method 0x25504777.
//
// Solidity: function registerOperator(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint96[], uint96[])
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactorSession) RegisterOperator(operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.RegisterOperator(&_ContractEOStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// RemoveStrategies is a paid mutator transaction binding the contract method 0x5f1f2d77.
//
// Solidity: function removeStrategies(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactor) RemoveStrategies(opts *bind.TransactOpts, quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.contract.Transact(opts, "removeStrategies", quorumNumber, indicesToRemove)
}

// RemoveStrategies is a paid mutator transaction binding the contract method 0x5f1f2d77.
//
// Solidity: function removeStrategies(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) RemoveStrategies(quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.RemoveStrategies(&_ContractEOStakeRegistry.TransactOpts, quorumNumber, indicesToRemove)
}

// RemoveStrategies is a paid mutator transaction binding the contract method 0x5f1f2d77.
//
// Solidity: function removeStrategies(uint8 quorumNumber, uint256[] indicesToRemove) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactorSession) RemoveStrategies(quorumNumber uint8, indicesToRemove []*big.Int) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.RemoveStrategies(&_ContractEOStakeRegistry.TransactOpts, quorumNumber, indicesToRemove)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactor) SetMinimumStakeForQuorum(opts *bind.TransactOpts, quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.contract.Transact(opts, "setMinimumStakeForQuorum", quorumNumber, minimumStake)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) SetMinimumStakeForQuorum(quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.SetMinimumStakeForQuorum(&_ContractEOStakeRegistry.TransactOpts, quorumNumber, minimumStake)
}

// SetMinimumStakeForQuorum is a paid mutator transaction binding the contract method 0xbc9a40c3.
//
// Solidity: function setMinimumStakeForQuorum(uint8 quorumNumber, uint96 minimumStake) returns()
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactorSession) SetMinimumStakeForQuorum(quorumNumber uint8, minimumStake *big.Int) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.SetMinimumStakeForQuorum(&_ContractEOStakeRegistry.TransactOpts, quorumNumber, minimumStake)
}

// UpdateOperatorStake is a paid mutator transaction binding the contract method 0x66acfefe.
//
// Solidity: function updateOperatorStake(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint192)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactor) UpdateOperatorStake(opts *bind.TransactOpts, operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.contract.Transact(opts, "updateOperatorStake", operator, operatorId, quorumNumbers)
}

// UpdateOperatorStake is a paid mutator transaction binding the contract method 0x66acfefe.
//
// Solidity: function updateOperatorStake(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint192)
func (_ContractEOStakeRegistry *ContractEOStakeRegistrySession) UpdateOperatorStake(operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.UpdateOperatorStake(&_ContractEOStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// UpdateOperatorStake is a paid mutator transaction binding the contract method 0x66acfefe.
//
// Solidity: function updateOperatorStake(address operator, bytes32 operatorId, bytes quorumNumbers) returns(uint192)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryTransactorSession) UpdateOperatorStake(operator common.Address, operatorId [32]byte, quorumNumbers []byte) (*types.Transaction, error) {
	return _ContractEOStakeRegistry.Contract.UpdateOperatorStake(&_ContractEOStakeRegistry.TransactOpts, operator, operatorId, quorumNumbers)
}

// ContractEOStakeRegistryMinimumStakeForQuorumUpdatedIterator is returned from FilterMinimumStakeForQuorumUpdated and is used to iterate over the raw logs and unpacked data for MinimumStakeForQuorumUpdated events raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryMinimumStakeForQuorumUpdatedIterator struct {
	Event *ContractEOStakeRegistryMinimumStakeForQuorumUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOStakeRegistryMinimumStakeForQuorumUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOStakeRegistryMinimumStakeForQuorumUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOStakeRegistryMinimumStakeForQuorumUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOStakeRegistryMinimumStakeForQuorumUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOStakeRegistryMinimumStakeForQuorumUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOStakeRegistryMinimumStakeForQuorumUpdated represents a MinimumStakeForQuorumUpdated event raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryMinimumStakeForQuorumUpdated struct {
	QuorumNumber uint8
	MinimumStake *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterMinimumStakeForQuorumUpdated is a free log retrieval operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) FilterMinimumStakeForQuorumUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractEOStakeRegistryMinimumStakeForQuorumUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.FilterLogs(opts, "MinimumStakeForQuorumUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractEOStakeRegistryMinimumStakeForQuorumUpdatedIterator{contract: _ContractEOStakeRegistry.contract, event: "MinimumStakeForQuorumUpdated", logs: logs, sub: sub}, nil
}

// WatchMinimumStakeForQuorumUpdated is a free log subscription operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) WatchMinimumStakeForQuorumUpdated(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryMinimumStakeForQuorumUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.WatchLogs(opts, "MinimumStakeForQuorumUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOStakeRegistryMinimumStakeForQuorumUpdated)
				if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "MinimumStakeForQuorumUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseMinimumStakeForQuorumUpdated is a log parse operation binding the contract event 0x26eecff2b70b0a71104ff4d940ba7162d23a95c248771fc487a7be17a596b3cf.
//
// Solidity: event MinimumStakeForQuorumUpdated(uint8 indexed quorumNumber, uint96 minimumStake)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) ParseMinimumStakeForQuorumUpdated(log types.Log) (*ContractEOStakeRegistryMinimumStakeForQuorumUpdated, error) {
	event := new(ContractEOStakeRegistryMinimumStakeForQuorumUpdated)
	if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "MinimumStakeForQuorumUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOStakeRegistryOperatorStakeUpdateIterator is returned from FilterOperatorStakeUpdate and is used to iterate over the raw logs and unpacked data for OperatorStakeUpdate events raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryOperatorStakeUpdateIterator struct {
	Event *ContractEOStakeRegistryOperatorStakeUpdate // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOStakeRegistryOperatorStakeUpdateIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOStakeRegistryOperatorStakeUpdate)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOStakeRegistryOperatorStakeUpdate)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOStakeRegistryOperatorStakeUpdateIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOStakeRegistryOperatorStakeUpdateIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOStakeRegistryOperatorStakeUpdate represents a OperatorStakeUpdate event raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryOperatorStakeUpdate struct {
	OperatorId   [32]byte
	QuorumNumber uint8
	Stake        *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterOperatorStakeUpdate is a free log retrieval operation binding the contract event 0x2f527d527e95d8fe40aec55377743bb779087da3f6d0d08f12e36444da62327d.
//
// Solidity: event OperatorStakeUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) FilterOperatorStakeUpdate(opts *bind.FilterOpts, operatorId [][32]byte) (*ContractEOStakeRegistryOperatorStakeUpdateIterator, error) {

	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.FilterLogs(opts, "OperatorStakeUpdate", operatorIdRule)
	if err != nil {
		return nil, err
	}
	return &ContractEOStakeRegistryOperatorStakeUpdateIterator{contract: _ContractEOStakeRegistry.contract, event: "OperatorStakeUpdate", logs: logs, sub: sub}, nil
}

// WatchOperatorStakeUpdate is a free log subscription operation binding the contract event 0x2f527d527e95d8fe40aec55377743bb779087da3f6d0d08f12e36444da62327d.
//
// Solidity: event OperatorStakeUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) WatchOperatorStakeUpdate(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryOperatorStakeUpdate, operatorId [][32]byte) (event.Subscription, error) {

	var operatorIdRule []interface{}
	for _, operatorIdItem := range operatorId {
		operatorIdRule = append(operatorIdRule, operatorIdItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.WatchLogs(opts, "OperatorStakeUpdate", operatorIdRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOStakeRegistryOperatorStakeUpdate)
				if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "OperatorStakeUpdate", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOperatorStakeUpdate is a log parse operation binding the contract event 0x2f527d527e95d8fe40aec55377743bb779087da3f6d0d08f12e36444da62327d.
//
// Solidity: event OperatorStakeUpdate(bytes32 indexed operatorId, uint8 quorumNumber, uint96 stake)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) ParseOperatorStakeUpdate(log types.Log) (*ContractEOStakeRegistryOperatorStakeUpdate, error) {
	event := new(ContractEOStakeRegistryOperatorStakeUpdate)
	if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "OperatorStakeUpdate", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOStakeRegistryQuorumCreatedIterator is returned from FilterQuorumCreated and is used to iterate over the raw logs and unpacked data for QuorumCreated events raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryQuorumCreatedIterator struct {
	Event *ContractEOStakeRegistryQuorumCreated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOStakeRegistryQuorumCreatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOStakeRegistryQuorumCreated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOStakeRegistryQuorumCreated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOStakeRegistryQuorumCreatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOStakeRegistryQuorumCreatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOStakeRegistryQuorumCreated represents a QuorumCreated event raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryQuorumCreated struct {
	QuorumNumber uint8
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterQuorumCreated is a free log retrieval operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) FilterQuorumCreated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractEOStakeRegistryQuorumCreatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.FilterLogs(opts, "QuorumCreated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractEOStakeRegistryQuorumCreatedIterator{contract: _ContractEOStakeRegistry.contract, event: "QuorumCreated", logs: logs, sub: sub}, nil
}

// WatchQuorumCreated is a free log subscription operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) WatchQuorumCreated(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryQuorumCreated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.WatchLogs(opts, "QuorumCreated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOStakeRegistryQuorumCreated)
				if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "QuorumCreated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseQuorumCreated is a log parse operation binding the contract event 0x831a9c86c45bb303caf3f064be2bc2b9fd4ecf19e47c4ac02a61e75dabfe55b4.
//
// Solidity: event QuorumCreated(uint8 indexed quorumNumber)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) ParseQuorumCreated(log types.Log) (*ContractEOStakeRegistryQuorumCreated, error) {
	event := new(ContractEOStakeRegistryQuorumCreated)
	if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "QuorumCreated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOStakeRegistryStrategyAddedToQuorumIterator is returned from FilterStrategyAddedToQuorum and is used to iterate over the raw logs and unpacked data for StrategyAddedToQuorum events raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryStrategyAddedToQuorumIterator struct {
	Event *ContractEOStakeRegistryStrategyAddedToQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOStakeRegistryStrategyAddedToQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOStakeRegistryStrategyAddedToQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOStakeRegistryStrategyAddedToQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOStakeRegistryStrategyAddedToQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOStakeRegistryStrategyAddedToQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOStakeRegistryStrategyAddedToQuorum represents a StrategyAddedToQuorum event raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryStrategyAddedToQuorum struct {
	QuorumNumber uint8
	Strategy     common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyAddedToQuorum is a free log retrieval operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) FilterStrategyAddedToQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractEOStakeRegistryStrategyAddedToQuorumIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.FilterLogs(opts, "StrategyAddedToQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractEOStakeRegistryStrategyAddedToQuorumIterator{contract: _ContractEOStakeRegistry.contract, event: "StrategyAddedToQuorum", logs: logs, sub: sub}, nil
}

// WatchStrategyAddedToQuorum is a free log subscription operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) WatchStrategyAddedToQuorum(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryStrategyAddedToQuorum, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.WatchLogs(opts, "StrategyAddedToQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOStakeRegistryStrategyAddedToQuorum)
				if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "StrategyAddedToQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyAddedToQuorum is a log parse operation binding the contract event 0x10565e56cacbf32eca267945f054fec02e59750032d113d3302182ad967f5404.
//
// Solidity: event StrategyAddedToQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) ParseStrategyAddedToQuorum(log types.Log) (*ContractEOStakeRegistryStrategyAddedToQuorum, error) {
	event := new(ContractEOStakeRegistryStrategyAddedToQuorum)
	if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "StrategyAddedToQuorum", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOStakeRegistryStrategyMultiplierUpdatedIterator is returned from FilterStrategyMultiplierUpdated and is used to iterate over the raw logs and unpacked data for StrategyMultiplierUpdated events raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryStrategyMultiplierUpdatedIterator struct {
	Event *ContractEOStakeRegistryStrategyMultiplierUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOStakeRegistryStrategyMultiplierUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOStakeRegistryStrategyMultiplierUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOStakeRegistryStrategyMultiplierUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOStakeRegistryStrategyMultiplierUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOStakeRegistryStrategyMultiplierUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOStakeRegistryStrategyMultiplierUpdated represents a StrategyMultiplierUpdated event raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryStrategyMultiplierUpdated struct {
	QuorumNumber uint8
	Strategy     common.Address
	Multiplier   *big.Int
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyMultiplierUpdated is a free log retrieval operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) FilterStrategyMultiplierUpdated(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractEOStakeRegistryStrategyMultiplierUpdatedIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.FilterLogs(opts, "StrategyMultiplierUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractEOStakeRegistryStrategyMultiplierUpdatedIterator{contract: _ContractEOStakeRegistry.contract, event: "StrategyMultiplierUpdated", logs: logs, sub: sub}, nil
}

// WatchStrategyMultiplierUpdated is a free log subscription operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) WatchStrategyMultiplierUpdated(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryStrategyMultiplierUpdated, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.WatchLogs(opts, "StrategyMultiplierUpdated", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOStakeRegistryStrategyMultiplierUpdated)
				if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "StrategyMultiplierUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyMultiplierUpdated is a log parse operation binding the contract event 0x11a5641322da1dff56a4b66eaac31ffa465295ece907cd163437793b4d009a75.
//
// Solidity: event StrategyMultiplierUpdated(uint8 indexed quorumNumber, address strategy, uint256 multiplier)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) ParseStrategyMultiplierUpdated(log types.Log) (*ContractEOStakeRegistryStrategyMultiplierUpdated, error) {
	event := new(ContractEOStakeRegistryStrategyMultiplierUpdated)
	if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "StrategyMultiplierUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOStakeRegistryStrategyRemovedFromQuorumIterator is returned from FilterStrategyRemovedFromQuorum and is used to iterate over the raw logs and unpacked data for StrategyRemovedFromQuorum events raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryStrategyRemovedFromQuorumIterator struct {
	Event *ContractEOStakeRegistryStrategyRemovedFromQuorum // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOStakeRegistryStrategyRemovedFromQuorumIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOStakeRegistryStrategyRemovedFromQuorum)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOStakeRegistryStrategyRemovedFromQuorum)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOStakeRegistryStrategyRemovedFromQuorumIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOStakeRegistryStrategyRemovedFromQuorumIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOStakeRegistryStrategyRemovedFromQuorum represents a StrategyRemovedFromQuorum event raised by the ContractEOStakeRegistry contract.
type ContractEOStakeRegistryStrategyRemovedFromQuorum struct {
	QuorumNumber uint8
	Strategy     common.Address
	Raw          types.Log // Blockchain specific contextual infos
}

// FilterStrategyRemovedFromQuorum is a free log retrieval operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) FilterStrategyRemovedFromQuorum(opts *bind.FilterOpts, quorumNumber []uint8) (*ContractEOStakeRegistryStrategyRemovedFromQuorumIterator, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.FilterLogs(opts, "StrategyRemovedFromQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return &ContractEOStakeRegistryStrategyRemovedFromQuorumIterator{contract: _ContractEOStakeRegistry.contract, event: "StrategyRemovedFromQuorum", logs: logs, sub: sub}, nil
}

// WatchStrategyRemovedFromQuorum is a free log subscription operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) WatchStrategyRemovedFromQuorum(opts *bind.WatchOpts, sink chan<- *ContractEOStakeRegistryStrategyRemovedFromQuorum, quorumNumber []uint8) (event.Subscription, error) {

	var quorumNumberRule []interface{}
	for _, quorumNumberItem := range quorumNumber {
		quorumNumberRule = append(quorumNumberRule, quorumNumberItem)
	}

	logs, sub, err := _ContractEOStakeRegistry.contract.WatchLogs(opts, "StrategyRemovedFromQuorum", quorumNumberRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOStakeRegistryStrategyRemovedFromQuorum)
				if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "StrategyRemovedFromQuorum", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseStrategyRemovedFromQuorum is a log parse operation binding the contract event 0x31fa2e2cd280c9375e13ffcf3d81e2378100186e4058f8d3ddb690b82dcd31f7.
//
// Solidity: event StrategyRemovedFromQuorum(uint8 indexed quorumNumber, address strategy)
func (_ContractEOStakeRegistry *ContractEOStakeRegistryFilterer) ParseStrategyRemovedFromQuorum(log types.Log) (*ContractEOStakeRegistryStrategyRemovedFromQuorum, error) {
	event := new(ContractEOStakeRegistryStrategyRemovedFromQuorum)
	if err := _ContractEOStakeRegistry.contract.UnpackLog(event, "StrategyRemovedFromQuorum", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
