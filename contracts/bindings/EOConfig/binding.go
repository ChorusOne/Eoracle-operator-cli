// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractEOConfig

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// ContractEOConfigMetaData contains all meta data concerning the ContractEOConfig contract.
var ContractEOConfigMetaData = &bind.MetaData{
	ABI: "[{\"type\":\"function\",\"name\":\"addSource\",\"inputs\":[{\"name\":\"name\",\"type\":\"bytes24\",\"internalType\":\"bytes24\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addSources\",\"inputs\":[{\"name\":\"names\",\"type\":\"bytes24[]\",\"internalType\":\"bytes24[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addSymbol\",\"inputs\":[{\"name\":\"name\",\"type\":\"bytes8\",\"internalType\":\"bytes8\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"addSymbols\",\"inputs\":[{\"name\":\"names\",\"type\":\"bytes8[]\",\"internalType\":\"bytes8[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"aggregator\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"contractIEOAggregator\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"aliasToOperator\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"chainManager\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"declareAlias\",\"inputs\":[{\"name\":\"operatorAlias\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"getSourceSymbols\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\",\"internalType\":\"uint16[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"getSymbolSources\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint16[]\",\"internalType\":\"uint16[]\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"initialize\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"isIdAllowed\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bool\",\"internalType\":\"bool\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"notify\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"onStateReceive\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"},{\"name\":\"sender\",\"type\":\"address\",\"internalType\":\"address\"},{\"name\":\"data\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"operatorToAlias\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"operatorToRegistrationData\",\"inputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[{\"name\":\"\",\"type\":\"bytes\",\"internalType\":\"bytes\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"owner\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"address\",\"internalType\":\"address\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"packPair\",\"inputs\":[{\"name\":\"source\",\"type\":\"uint16\",\"internalType\":\"uint16\"},{\"name\":\"symbol\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"outputs\":[{\"name\":\"id\",\"type\":\"bytes4\",\"internalType\":\"bytes4\"}],\"stateMutability\":\"pure\"},{\"type\":\"function\",\"name\":\"removeSource\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"removeSymbol\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"renounceOwnership\",\"inputs\":[],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setAggregator\",\"inputs\":[{\"name\":\"aggregator_\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"setChainManager\",\"inputs\":[{\"name\":\"chainManager_\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"sourceById\",\"inputs\":[{\"name\":\"\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"outputs\":[{\"name\":\"name\",\"type\":\"bytes24\",\"internalType\":\"bytes24\"},{\"name\":\"id\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sourceId\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes24\",\"internalType\":\"bytes24\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sourceIds\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"sourceIdsLength\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"subscribe\",\"inputs\":[{\"name\":\"listener\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"symbolById\",\"inputs\":[{\"name\":\"\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"outputs\":[{\"name\":\"name\",\"type\":\"bytes8\",\"internalType\":\"bytes8\"},{\"name\":\"id\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"symbolId\",\"inputs\":[{\"name\":\"\",\"type\":\"bytes8\",\"internalType\":\"bytes8\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"symbolIds\",\"inputs\":[{\"name\":\"\",\"type\":\"uint256\",\"internalType\":\"uint256\"}],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"symbolIdsLength\",\"inputs\":[],\"outputs\":[{\"name\":\"\",\"type\":\"uint16\",\"internalType\":\"uint16\"}],\"stateMutability\":\"view\"},{\"type\":\"function\",\"name\":\"transferOwnership\",\"inputs\":[{\"name\":\"newOwner\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"unsubscribe\",\"inputs\":[{\"name\":\"listener\",\"type\":\"address\",\"internalType\":\"address\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateSource\",\"inputs\":[{\"name\":\"sourceId_\",\"type\":\"uint16\",\"internalType\":\"uint16\"},{\"name\":\"name\",\"type\":\"bytes24\",\"internalType\":\"bytes24\"},{\"name\":\"symbols_\",\"type\":\"uint16[]\",\"internalType\":\"uint16[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"function\",\"name\":\"updateSymbol\",\"inputs\":[{\"name\":\"symbolId_\",\"type\":\"uint16\",\"internalType\":\"uint16\"},{\"name\":\"name\",\"type\":\"bytes8\",\"internalType\":\"bytes8\"},{\"name\":\"sources_\",\"type\":\"uint16[]\",\"internalType\":\"uint16[]\"}],\"outputs\":[],\"stateMutability\":\"nonpayable\"},{\"type\":\"event\",\"name\":\"Initialized\",\"inputs\":[{\"name\":\"version\",\"type\":\"uint8\",\"indexed\":false,\"internalType\":\"uint8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OnConfigChange\",\"inputs\":[],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OnSourceAdded\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\",\"indexed\":false,\"internalType\":\"uint16\"},{\"name\":\"name\",\"type\":\"bytes24\",\"indexed\":false,\"internalType\":\"bytes24\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OnSourceRemoved\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\",\"indexed\":false,\"internalType\":\"uint16\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OnSourceUpdated\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\",\"indexed\":false,\"internalType\":\"uint16\"},{\"name\":\"name\",\"type\":\"bytes24\",\"indexed\":false,\"internalType\":\"bytes24\"},{\"name\":\"symbols\",\"type\":\"uint16[]\",\"indexed\":false,\"internalType\":\"uint16[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OnSymbolAdded\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\",\"indexed\":false,\"internalType\":\"uint16\"},{\"name\":\"name\",\"type\":\"bytes8\",\"indexed\":false,\"internalType\":\"bytes8\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OnSymbolRemoved\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\",\"indexed\":false,\"internalType\":\"uint16\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OnSymbolUpdated\",\"inputs\":[{\"name\":\"id\",\"type\":\"uint16\",\"indexed\":false,\"internalType\":\"uint16\"},{\"name\":\"name\",\"type\":\"bytes8\",\"indexed\":false,\"internalType\":\"bytes8\"},{\"name\":\"sources\",\"type\":\"uint16[]\",\"indexed\":false,\"internalType\":\"uint16[]\"}],\"anonymous\":false},{\"type\":\"event\",\"name\":\"OwnershipTransferred\",\"inputs\":[{\"name\":\"previousOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"},{\"name\":\"newOwner\",\"type\":\"address\",\"indexed\":true,\"internalType\":\"address\"}],\"anonymous\":false}]",
	Bin: "0x608060405234801561001057600080fd5b506132c7806100206000396000f3fe608060405234801561001057600080fd5b506004361061025b5760003560e01c806388c5499011610145578063bf81551e116100bd578063edc24d691161008c578063f2fde38b11610071578063f2fde38b146105f2578063f405566d14610605578063f9120af61461061857600080fd5b8063edc24d69146105cc578063eeb49945146105df57600080fd5b8063bf81551e1461050e578063bfa6547214610564578063c18cb7b01461058d578063d70cf0ed146105b957600080fd5b806392c94ab511610114578063a0a79a7c116100f9578063a0a79a7c1461048f578063b2ee3c95146104e8578063ba868392146104fb57600080fd5b806392c94ab5146104535780639483a58d1461047c57600080fd5b806388c549901461040357806388dea97d14610416578063899f58981461043a5780638da5cb5b1461044257600080fd5b806341a7726a116101d85780636d34c28b116101a75780637262561c1161018c5780637262561c146103d55780637672db8e146103e85780638129fc1c146103fb57600080fd5b80636d34c28b146103ba578063715018a6146103cd57600080fd5b806341a7726a146103615780634a9910fa146103745780635aa264e4146103945780635d824812146103a757600080fd5b806314832bc81161022f578063245a7bfc11610214578063245a7bfc146102ff5780632d75981c1461032a5780633ae23dfb1461034e57600080fd5b806314832bc8146102d757806320a332a4146102f757600080fd5b80629c03fb1461026057806304495eb11461027c57806308059117146102af57806313996105146102c4575b600080fd5b606e545b60405161ffff90911681526020015b60405180910390f35b61029f61028a366004612b22565b60696020526000908152604090205460ff1681565b6040519015158152602001610273565b6102c26102bd366004612b70565b61062b565b005b6102c26102d2366004612ba4565b610819565b6102ea6102e5366004612bd1565b610a0f565b6040516102739190612c2b565b606d54610264565b607254610312906001600160a01b031681565b6040516001600160a01b039091168152602001610273565b610264610338366004612b70565b60656020526000908152604090205461ffff1681565b6102ea61035c366004612bd1565b610aa1565b6102c261036f366004612c53565b610b0d565b610387610382366004612c53565b610bc1565b6040516102739190612c70565b6102c26103a2366004612bd1565b610c5b565b607154610312906001600160a01b031681565b6102646103c8366004612cbe565b610f0b565b6102c2610f43565b6102c26103e3366004612c53565b610f57565b6102c26103f6366004612bd1565b61106a565b6102c2611323565b6102c2610411366004612cd7565b611451565b610264610424366004612ba4565b60666020526000908152604090205461ffff1681565b6102c2611789565b6033546001600160a01b0316610312565b610312610461366004612c53565b606b602052600090815260409020546001600160a01b031681565b6102c261048a366004612dd3565b611869565b6104c561049d366004612bd1565b60686020526000908152604090205460c081901b9068010000000000000000900461ffff1682565b604080516001600160c01b0319909316835261ffff909116602083015201610273565b6102c26104f6366004612e93565b611b63565b6102c2610509366004612f2b565b611bb3565b61054061051c366004612bd1565b60676020526000908152604090819020549081901b90600160c01b900461ffff1682565b6040805167ffffffffffffffff19909316835261ffff909116602083015201610273565b610312610572366004612c53565b606c602052600090815260409020546001600160a01b031681565b6105a061059b366004612fb8565b611c03565b6040516001600160e01b03199091168152602001610273565b6102c26105c7366004612c53565b611c57565b6102646105da366004612cbe565b611c81565b6102c26105ed366004612feb565b611c91565b6102c2610600366004612c53565b611f79565b6102c2610613366004612c53565b612006565b6102c2610626366004612c53565b612373565b61063361239d565b6001600160c01b0319811660009081526065602052604090205461ffff16156106a35760405162461bcd60e51b815260206004820152601560248201527f73796d626f6c20616c726561647920657869737473000000000000000000000060448201526064015b60405180910390fd5b606f805460009161ffff90911690826106bb8361307b565b82546101009290920a61ffff8181021990931691831602179091556001600160c01b031984166000818152606560209081526040808320805461ffff19168787169081179091558151606080820184528184019081528185018381529682529185526068845291909320815181549551909616680100000000000000000269ffffffffffffffffffff1990951660c09690961c95909517939093178455905180519495509193849392610775926001850192910190612a43565b5050606d8054600181018255600091909152601081047f5006b838207c6a9ae9b84d68f467dd4bb5c305fbfb6b04eab8faaabeec1e18d801805461ffff8681166002600f909516949094026101000a848102910219909116179055604080519182526001600160c01b0319861660208301527f17c9d771a4294ad678b91f00d84d6c838ce1f073b54b67bf7070320331667e999250015b60405180910390a1505050565b61082161239d565b67ffffffffffffffff19811660009081526066602052604090205461ffff161561088d5760405162461bcd60e51b815260206004820152601560248201527f736f7572636520616c7265616479206578697374730000000000000000000000604482015260640161069a565b606f80546000916201000090910461ffff169060026108ab8361307b565b82546101009290920a61ffff81810219909316918316021790915567ffffffffffffffff1984166000818152606660209081526040808320805461ffff19168787169081179091558151606080820184528184019081528185018381529682529185526067845293829020845181549651909716600160c01b027fffffffffffff00000000000000000000000000000000000000000000000000009096169690921c959095179390931783559251805194955090938493610973926001850192910190612a43565b5050606e8054600181018255600091909152601081047f9930d9ff0dee0ef5ca2f7710ea66b8f84dd0f5f5351ecffe72b952cd9db7142a01805461ffff8681166002600f909516949094026101000a8481029102199091161790556040805191825267ffffffffffffffff19861660208301527f209da2b4b51d7df154f686f6190e38bf6eb987bf19f48df080b9a14111762d8892500161080c565b61ffff8116600090815260686020908152604091829020600101805483518184028101840190945280845260609392830182828015610a9557602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610a5c5790505b50505050509050919050565b61ffff8116600090815260676020908152604091829020600101805483518184028101840190945280845260609392830182828015610a95576000918252602091829020805461ffff168452908202830192909160029101808411610a5c575094979650505050505050565b610b1561239d565b6000819050806001600160a01b031663df58ad1c6040518163ffffffff1660e01b8152600401600060405180830381600087803b158015610b5557600080fd5b505af1158015610b69573d6000803e3d6000fd5b5050607080546001810182556000919091527f8f6b23ffa15f0465e3176e15ca644cf24f86dc1312fe715484e3c4aead5eb78b0180546001600160a01b0319166001600160a01b039490941693909317909255505050565b606a6020526000908152604090208054610bda9061309c565b80601f0160208091040260200160405190810160405280929190818152602001828054610c069061309c565b8015610c535780601f10610c2857610100808354040283529160200191610c53565b820191906000526020600020905b815481529060010190602001808311610c3657829003601f168201915b505050505081565b610c6361239d565b61ffff8082166000908152606860205260408120546801000000000000000090049091169003610cd55760405162461bcd60e51b815260206004820152600e60248201527f756e6b6e6f776e2073796d626f6c000000000000000000000000000000000000604482015260640161069a565b610d7381606860008461ffff1661ffff168152602001908152602001600020600101805480602002602001604051908101604052809291908181526020018280548015610d6957602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff1681526020019060020190602082600101049283019260010382029150808411610d305790505b50505050506123f7565b61ffff81166000908152606860205260408120805469ffffffffffffffffffff1916815590610da56001830182612aec565b505060005b606d5461ffff82161015610ecf578161ffff16606d8261ffff1681548110610dd457610dd46130d6565b60009182526020909120601082040154600f9091166002026101000a900461ffff1603610ec757606d8054610e0b906001906130ec565b81548110610e1b57610e1b6130d6565b90600052602060002090601091828204019190066002029054906101000a900461ffff16606d8261ffff1681548110610e5657610e566130d6565b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff160217905550606d805480610e9657610e966130ff565b600082815260209020601060001990920191820401805461ffff6002600f8516026101000a02191690559055610ecf565b600101610daa565b5060405161ffff821681527faf1d0220552f1ffa37378a7942dffc37d3f6e51062806798e46e650aa95ae693906020015b60405180910390a150565b606e8181548110610f1b57600080fd5b9060005260206000209060109182820401919006600202915054906101000a900461ffff1681565b610f4b61239d565b610f556000612631565b565b610f5f61239d565b60005b60705481101561106657816001600160a01b031660708281548110610f8957610f896130d6565b6000918252602090912001546001600160a01b0316036110545760708054610fb3906001906130ec565b81548110610fc357610fc36130d6565b600091825260209091200154607080546001600160a01b039092169183908110610fef57610fef6130d6565b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550607080548061102e5761102e6130ff565b600082815260209020810160001990810180546001600160a01b03191690550190555050565b8061105e81613115565b915050610f62565b5050565b61107261239d565b61ffff808216600090815260676020526040812054600160c01b900490911690036110df5760405162461bcd60e51b815260206004820152600e60248201527f756e6b6e6f776e20736f75726365000000000000000000000000000000000000604482015260640161069a565b61117d81606760008461ffff1661ffff16815260200190815260200160002060010180548060200260200160405190810160405280929190818152602001828054801561117357602002820191906000526020600020906000905b82829054906101000a900461ffff1661ffff168152602001906002019060208260010104928301926001038202915080841161113a5790505b5050505050612683565b61ffff8116600090815260676020526040812080547fffffffffffff0000000000000000000000000000000000000000000000000000168155906111c46001830182612aec565b505060005b606e5461ffff821610156112ee578161ffff16606e8261ffff16815481106111f3576111f36130d6565b60009182526020909120601082040154600f9091166002026101000a900461ffff16036112e657606e805461122a906001906130ec565b8154811061123a5761123a6130d6565b90600052602060002090601091828204019190066002029054906101000a900461ffff16606e8261ffff1681548110611275576112756130d6565b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff160217905550606e8054806112b5576112b56130ff565b600082815260209020601060001990920191820401805461ffff6002600f8516026101000a021916905590556112ee565b6001016111c9565b5060405161ffff821681527fce77a2b83741e02bd444c230b0f3ab40ea28201581cd73d3fe76809d16cca36190602001610f00565b600054610100900460ff16158080156113435750600054600160ff909116105b8061135d5750303b15801561135d575060005460ff166001145b6113cf5760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161069a565b6000805460ff1916600117905580156113f2576000805461ff0019166101001790555b6113fa6128bd565b606f805463ffffffff191662010001179055801561144e576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602001610f00565b50565b61145961239d565b61ffff808516600090815260676020526040812080549092600160c01b9091041690036114c85760405162461bcd60e51b815260206004820152600e60248201527f756e6b6e6f776e20736f75726365000000000000000000000000000000000000604482015260640161069a565b61150483838080602002602001604051908101604052809392919081815260200183836020028082843760009201919091525061293092505050565b6115505760405162461bcd60e51b815260206004820152601160248201527f6475706c696361746520736f7572636573000000000000000000000000000000604482015260640161069a565b6115af8582600101805480602002602001604051908101604052809291908181526020018280548015611173576000918252602091829020805461ffff16845290820283019290916002910180841161113a5790505050505050612683565b6115bd600182016000612aec565b60005b61ffff811683111561172e57600084848361ffff168181106115e4576115e46130d6565b90506020020160208101906115f99190612bd1565b61ffff8082166000908152606860205260408120549293506801000000000000000090920416900361166d5760405162461bcd60e51b815260206004820152601960248201527f7265666572656e63656420756e6b6e6f776e2073796d626f6c00000000000000604482015260640161069a565b6001838101805480830182556000918252602080832060108084049091018054600f948516600290810261010090810a61ffff818102199094168b8516918202179094559287526068855260408720880180549889018155875293862092870490920180549690941690920290910a80820219909416908b1693909302929092179091556116fb8883611c03565b6001600160e01b0319166000908152606960205260409020805460ff191660019081179091559290920191506115c09050565b5080546001600160c01b031916604085811c919091178255517f051fa95d237354f8475b41634acc198ae4da9758585b7ab07f2f6839f71492a29061177a90879087908790879061312e565b60405180910390a15050505050565b61179161239d565b60005b60705481101561183d57607081815481106117b1576117b16130d6565b6000918252602082200154604080517fdf58ad1c00000000000000000000000000000000000000000000000000000000815290516001600160a01b039092169263df58ad1c9260048084019382900301818387803b15801561181257600080fd5b505af1158015611826573d6000803e3d6000fd5b50505050808061183590613115565b915050611794565b506040517f662f307c99b27e8c90dbce053f13da64171deb8c531b3ae9c9446ab010da7fdc90600090a1565b61187161239d565b61ffff808416600090815260686020526040812080549092680100000000000000009091041690036118e55760405162461bcd60e51b815260206004820152600e60248201527f756e6b6e6f776e2073796d626f6c000000000000000000000000000000000000604482015260640161069a565b6118ee82612930565b61193a5760405162461bcd60e51b815260206004820152601160248201527f6475706c696361746520736f7572636573000000000000000000000000000000604482015260640161069a565b6119998482600101805480602002602001604051908101604052809291908181526020018280548015610d69576000918252602091829020805461ffff168452908202830192909160029101808411610d3057905050505050506123f7565b6119a7600182016000612aec565b60005b82518161ffff161015611b0b576000838261ffff16815181106119cf576119cf6130d6565b60209081029190910181015161ffff808216600090815260679093526040832054919350600160c01b909104169003611a4a5760405162461bcd60e51b815260206004820152601960248201527f7265666572656e63656420756e6b6e6f776e20736f7572636500000000000000604482015260640161069a565b6001838101805480830182556000918252602080832060108084049091018054600f948516600290810261010090810a61ffff818102199094168b8516918202179094559287526067855260408720880180549889018155875293862092870490920180549690941690920290910a80820219909416908a169390930292909217909155611ad88288611c03565b6001600160e01b0319166000908152606960205260409020805460ff191660019081179091559290920191506119aa9050565b50805467ffffffffffffffff191660c084901c1781556040517f05aefdf7098c008b0f258f7f5aceb8ed4e93f8faedba69832f087a0c3a09d1df90611b5590869086908690613198565b60405180910390a150505050565b611b6b61239d565b60005b81518161ffff16101561106657611ba1828261ffff1681518110611b9457611b946130d6565b6020026020010151610819565b80611bab8161307b565b915050611b6e565b611bbb61239d565b60005b81518161ffff16101561106657611bf1828261ffff1681518110611be457611be46130d6565b602002602001015161062b565b80611bfb8161307b565b915050611bbe565b7fffff00000000000000000000000000000000000000000000000000000000000060f083901b167dffff0000000000000000000000000000000000000000000000000000000060e083901b16175b92915050565b611c5f61239d565b607180546001600160a01b0319166001600160a01b0392909216919091179055565b606d8181548110610f1b57600080fd5b3361100114611ce25760405162461bcd60e51b815260206004820152601260248201527f4e6f742073746174652072656365697665720000000000000000000000000000604482015260640161069a565b6071546001600160a01b03848116911614611d3f5760405162461bcd60e51b815260206004820152600e60248201527f494e56414c49445f53454e444552000000000000000000000000000000000000604482015260640161069a565b6000611d4e60208284866131ce565b611d57916131f8565b6072549091506001600160a01b031615611f72577f58cc5acb742fd5eb9df21407aed105abca7d37584645d014636aa13c7b7bc3878103611e3057600080611da184860186613216565b6072546040517f9abee7d00000000000000000000000000000000000000000000000000000000081526001600160a01b03808516600483015260248201849052939650919450919091169150639abee7d0906044015b600060405180830381600087803b158015611e1157600080fd5b505af1158015611e25573d6000803e3d6000fd5b505050505050611f72565b7fc87f724facc6795a5744816bb2f8c13d2a51fd5baa39f1c0f298a19323b341bf8103611ec057600080611e6684860186613216565b6072546040517fe6635f5d0000000000000000000000000000000000000000000000000000000081526001600160a01b0380851660048301526024820184905293965091945091909116915063e6635f5d90604401611df7565b7f2fe819b21d95cfd994a01b20198961a70377a4ae5a96e4f059a7e23405bb35e98103611f72576000611ef58385018561324e565b6072546040517f93835a5b0000000000000000000000000000000000000000000000000000000081526001600160a01b038084166004830152929450911691506393835a5b90602401600060405180830381600087803b158015611f5857600080fd5b505af1158015611f6c573d6000803e3d6000fd5b50505050505b5050505050565b611f8161239d565b6001600160a01b038116611ffd5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161069a565b61144e81612631565b6001600160a01b03811661205c5760405162461bcd60e51b815260206004820152601560248201527f616c696173206973207a65726f20616464726573730000000000000000000000604482015260640161069a565b6001600160a01b038181166000908152606c602052604090205416158061209c57506001600160a01b038181166000908152606c60205260409020541633145b61210e5760405162461bcd60e51b815260206004820152602a60248201527f616c69617320697320616c72656164792074616b656e20627920616e6f74686560448201527f72206f70657261746f7200000000000000000000000000000000000000000000606482015260840161069a565b336000908152606b60205260409020546001600160a01b0380831691160361219e5760405162461bcd60e51b815260206004820152603460248201527f70726f766964656420616c69617320697320616c7265616479206465636c617260448201527f656420666f722074686973206f70657261746f72000000000000000000000000606482015260840161069a565b336000908152606c60205260409020546001600160a01b03161561222a5760405162461bcd60e51b815260206004820152602760248201527f63616e6e6f74206465636c61726520616c6961732066726f6d20616c6961732060448201527f6164647265737300000000000000000000000000000000000000000000000000606482015260840161069a565b6001600160a01b038181166000908152606c6020526040902054339116036122c857607254336000908152606b60205260409081902054905163012901b760e21b81526001600160a01b03918216600482015283821660248201529116906304a406dc90604401600060405180830381600087803b1580156122ab57600080fd5b505af11580156122bf573d6000803e3d6000fd5b5050505061232e565b60725460405163012901b760e21b81523360048201526001600160a01b038381166024830152909116906304a406dc90604401600060405180830381600087803b15801561231557600080fd5b505af1158015612329573d6000803e3d6000fd5b505050505b6001600160a01b03166000818152606c602090815260408083208054336001600160a01b03199182168117909255908452606b90925290912080549091169091179055565b61237b61239d565b607280546001600160a01b0319166001600160a01b0392909216919091179055565b6033546001600160a01b03163314610f555760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161069a565b60005b81518161ffff16101561262c576000828261ffff168151811061241f5761241f6130d6565b60209081029190910181015161ffff808216600090815260679093526040832054919350600160c01b90910416900361249a5760405162461bcd60e51b815260206004820152601960248201527f7265666572656e63656420756e6b6e6f776e20736f7572636500000000000000604482015260640161069a565b61ffff81166000908152606760205260408120905b600182015461ffff821610156125e8578561ffff16826001018261ffff16815481106124dd576124dd6130d6565b60009182526020909120601082040154600f9091166002026101000a900461ffff16036125d657600180830180549091612516916130ec565b81548110612526576125266130d6565b90600052602060002090601091828204019190066002029054906101000a900461ffff16826001018261ffff1681548110612563576125636130d6565b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff160217905550816001018054806125a5576125a56130ff565b600082815260209020601060001990920191820401805461ffff6002600f8516026101000a021916905590556125e8565b806125e08161307b565b9150506124af565b5060006125f58387611c03565b6001600160e01b0319166000908152606960205260409020805460ff191690555082915061262490508161307b565b9150506123fa565b505050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b60005b81518161ffff16101561262c576000828261ffff16815181106126ab576126ab6130d6565b60209081029190910181015161ffff8082166000908152606890935260408320549193506801000000000000000090910416900361272b5760405162461bcd60e51b815260206004820152601960248201527f7265666572656e63656420756e6b6e6f776e2073796d626f6c00000000000000604482015260640161069a565b61ffff81166000908152606860205260408120905b600182015461ffff82161015612879578561ffff16826001018261ffff168154811061276e5761276e6130d6565b60009182526020909120601082040154600f9091166002026101000a900461ffff1603612867576001808301805490916127a7916130ec565b815481106127b7576127b76130d6565b90600052602060002090601091828204019190066002029054906101000a900461ffff16826001018261ffff16815481106127f4576127f46130d6565b90600052602060002090601091828204019190066002026101000a81548161ffff021916908361ffff16021790555081600101805480612836576128366130ff565b600082815260209020601060001990920191820401805461ffff6002600f8516026101000a02191690559055612879565b806128718161307b565b915050612740565b5060006128868684611c03565b6001600160e01b0319166000908152606960205260409020805460ff19169055508291506128b590508161307b565b915050612686565b600054610100900460ff166129285760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161069a565b610f556129cf565b6000805b82518110156129c657600061294a82600161327e565b90505b83518110156129b357838181518110612968576129686130d6565b602002602001015161ffff16848381518110612986576129866130d6565b602002602001015161ffff16036129a1575060009392505050565b806129ab81613115565b91505061294d565b50806129be81613115565b915050612934565b50600192915050565b600054610100900460ff16612a3a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b606482015260840161069a565b610f5533612631565b82805482825590600052602060002090600f01601090048101928215612adc5791602002820160005b83821115612aac57835183826101000a81548161ffff021916908361ffff1602179055509260200192600201602081600101049283019260010302612a6c565b8015612ada5782816101000a81549061ffff0219169055600201602081600101049283019260010302612aac565b505b50612ae8929150612b0d565b5090565b50805460008255600f01601090049060005260206000209081019061144e91905b5b80821115612ae85760008155600101612b0e565b600060208284031215612b3457600080fd5b81356001600160e01b031981168114612b4c57600080fd5b9392505050565b80356001600160c01b031981168114612b6b57600080fd5b919050565b600060208284031215612b8257600080fd5b612b4c82612b53565b803567ffffffffffffffff1981168114612b6b57600080fd5b600060208284031215612bb657600080fd5b612b4c82612b8b565b803561ffff81168114612b6b57600080fd5b600060208284031215612be357600080fd5b612b4c82612bbf565b600081518084526020808501945080840160005b83811015612c2057815161ffff1687529582019590820190600101612c00565b509495945050505050565b602081526000612b4c6020830184612bec565b6001600160a01b038116811461144e57600080fd5b600060208284031215612c6557600080fd5b8135612b4c81612c3e565b600060208083528351808285015260005b81811015612c9d57858101830151858201604001528201612c81565b506000604082860101526040601f19601f8301168501019250505092915050565b600060208284031215612cd057600080fd5b5035919050565b60008060008060608587031215612ced57600080fd5b612cf685612bbf565b9350612d0460208601612b8b565b9250604085013567ffffffffffffffff80821115612d2157600080fd5b818701915087601f830112612d3557600080fd5b813581811115612d4457600080fd5b8860208260051b8501011115612d5957600080fd5b95989497505060200194505050565b634e487b7160e01b600052604160045260246000fd5b604051601f8201601f1916810167ffffffffffffffff81118282101715612da757612da7612d68565b604052919050565b600067ffffffffffffffff821115612dc957612dc9612d68565b5060051b60200190565b600080600060608486031215612de857600080fd5b612df184612bbf565b92506020612e00818601612b53565b9250604085013567ffffffffffffffff811115612e1c57600080fd5b8501601f81018713612e2d57600080fd5b8035612e40612e3b82612daf565b612d7e565b81815260059190911b82018301908381019089831115612e5f57600080fd5b928401925b82841015612e8457612e7584612bbf565b82529284019290840190612e64565b80955050505050509250925092565b60006020808385031215612ea657600080fd5b823567ffffffffffffffff811115612ebd57600080fd5b8301601f81018513612ece57600080fd5b8035612edc612e3b82612daf565b81815260059190911b82018301908381019087831115612efb57600080fd5b928401925b82841015612f2057612f1184612b8b565b82529284019290840190612f00565b979650505050505050565b60006020808385031215612f3e57600080fd5b823567ffffffffffffffff811115612f5557600080fd5b8301601f81018513612f6657600080fd5b8035612f74612e3b82612daf565b81815260059190911b82018301908381019087831115612f9357600080fd5b928401925b82841015612f2057612fa984612b53565b82529284019290840190612f98565b60008060408385031215612fcb57600080fd5b612fd483612bbf565b9150612fe260208401612bbf565b90509250929050565b6000806000806060858703121561300157600080fd5b84359350602085013561301381612c3e565b9250604085013567ffffffffffffffff8082111561303057600080fd5b818701915087601f83011261304457600080fd5b81358181111561305357600080fd5b886020828501011115612d5957600080fd5b634e487b7160e01b600052601160045260246000fd5b600061ffff80831681810361309257613092613065565b6001019392505050565b600181811c908216806130b057607f821691505b6020821081036130d057634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b81810381811115611c5157611c51613065565b634e487b7160e01b600052603160045260246000fd5b60006001820161312757613127613065565b5060010190565b60006060820161ffff8088168452602067ffffffffffffffff19881681860152606060408601528286845260808601905087935060005b8781101561318a578361317786612bbf565b1682529382019390820190600101613165565b509998505050505050505050565b61ffff841681526001600160c01b0319831660208201526060604082015260006131c56060830184612bec565b95945050505050565b600080858511156131de57600080fd5b838611156131eb57600080fd5b5050820193919092039150565b80356020831015611c5157600019602084900360031b1b1692915050565b60008060006060848603121561322b57600080fd5b83359250602084013561323d81612c3e565b929592945050506040919091013590565b6000806040838503121561326157600080fd5b82359150602083013561327381612c3e565b809150509250929050565b80820180821115611c5157611c5161306556fea264697066735822122028341b70d92213b34ebe9963b8dc02c9a722f323f63be22c61e46dcf3d205ac864736f6c63430008130033",
}

// ContractEOConfigABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractEOConfigMetaData.ABI instead.
var ContractEOConfigABI = ContractEOConfigMetaData.ABI

// ContractEOConfigBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractEOConfigMetaData.Bin instead.
var ContractEOConfigBin = ContractEOConfigMetaData.Bin

// DeployContractEOConfig deploys a new Ethereum contract, binding an instance of ContractEOConfig to it.
func DeployContractEOConfig(auth *bind.TransactOpts, backend bind.ContractBackend) (common.Address, *types.Transaction, *ContractEOConfig, error) {
	parsed, err := ContractEOConfigMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractEOConfigBin), backend)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractEOConfig{ContractEOConfigCaller: ContractEOConfigCaller{contract: contract}, ContractEOConfigTransactor: ContractEOConfigTransactor{contract: contract}, ContractEOConfigFilterer: ContractEOConfigFilterer{contract: contract}}, nil
}

// ContractEOConfigMethods is an auto generated interface around an Ethereum contract.
type ContractEOConfigMethods interface {
	ContractEOConfigCalls
	ContractEOConfigTransacts
	ContractEOConfigFilters
}

// ContractEOConfigCalls is an auto generated interface that defines the call methods available for an Ethereum contract.
type ContractEOConfigCalls interface {
	Aggregator(opts *bind.CallOpts) (common.Address, error)

	AliasToOperator(opts *bind.CallOpts, arg0 common.Address) (common.Address, error)

	ChainManager(opts *bind.CallOpts) (common.Address, error)

	GetSourceSymbols(opts *bind.CallOpts, id uint16) ([]uint16, error)

	GetSymbolSources(opts *bind.CallOpts, id uint16) ([]uint16, error)

	IsIdAllowed(opts *bind.CallOpts, arg0 [4]byte) (bool, error)

	OperatorToAlias(opts *bind.CallOpts, arg0 common.Address) (common.Address, error)

	OperatorToRegistrationData(opts *bind.CallOpts, arg0 common.Address) ([]byte, error)

	Owner(opts *bind.CallOpts) (common.Address, error)

	PackPair(opts *bind.CallOpts, source uint16, symbol uint16) ([4]byte, error)

	SourceById(opts *bind.CallOpts, arg0 uint16) (struct {
		Name [24]byte
		Id   uint16
	}, error)

	SourceId(opts *bind.CallOpts, arg0 [24]byte) (uint16, error)

	SourceIds(opts *bind.CallOpts, arg0 *big.Int) (uint16, error)

	SourceIdsLength(opts *bind.CallOpts) (uint16, error)

	SymbolById(opts *bind.CallOpts, arg0 uint16) (struct {
		Name [8]byte
		Id   uint16
	}, error)

	SymbolId(opts *bind.CallOpts, arg0 [8]byte) (uint16, error)

	SymbolIds(opts *bind.CallOpts, arg0 *big.Int) (uint16, error)

	SymbolIdsLength(opts *bind.CallOpts) (uint16, error)
}

// ContractEOConfigTransacts is an auto generated interface that defines the transact methods available for an Ethereum contract.
type ContractEOConfigTransacts interface {
	AddSource(opts *bind.TransactOpts, name [24]byte) (*types.Transaction, error)

	AddSources(opts *bind.TransactOpts, names [][24]byte) (*types.Transaction, error)

	AddSymbol(opts *bind.TransactOpts, name [8]byte) (*types.Transaction, error)

	AddSymbols(opts *bind.TransactOpts, names [][8]byte) (*types.Transaction, error)

	DeclareAlias(opts *bind.TransactOpts, operatorAlias common.Address) (*types.Transaction, error)

	Initialize(opts *bind.TransactOpts) (*types.Transaction, error)

	Notify(opts *bind.TransactOpts) (*types.Transaction, error)

	OnStateReceive(opts *bind.TransactOpts, arg0 *big.Int, sender common.Address, data []byte) (*types.Transaction, error)

	RemoveSource(opts *bind.TransactOpts, id uint16) (*types.Transaction, error)

	RemoveSymbol(opts *bind.TransactOpts, id uint16) (*types.Transaction, error)

	RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error)

	SetAggregator(opts *bind.TransactOpts, aggregator_ common.Address) (*types.Transaction, error)

	SetChainManager(opts *bind.TransactOpts, chainManager_ common.Address) (*types.Transaction, error)

	Subscribe(opts *bind.TransactOpts, listener common.Address) (*types.Transaction, error)

	TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error)

	Unsubscribe(opts *bind.TransactOpts, listener common.Address) (*types.Transaction, error)

	UpdateSource(opts *bind.TransactOpts, sourceId_ uint16, name [24]byte, symbols_ []uint16) (*types.Transaction, error)

	UpdateSymbol(opts *bind.TransactOpts, symbolId_ uint16, name [8]byte, sources_ []uint16) (*types.Transaction, error)
}

// ContractEOConfigFilterer is an auto generated interface that defines the log filtering methods available for an Ethereum contract.
type ContractEOConfigFilters interface {
	FilterInitialized(opts *bind.FilterOpts) (*ContractEOConfigInitializedIterator, error)
	WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractEOConfigInitialized) (event.Subscription, error)
	ParseInitialized(log types.Log) (*ContractEOConfigInitialized, error)

	FilterOnConfigChange(opts *bind.FilterOpts) (*ContractEOConfigOnConfigChangeIterator, error)
	WatchOnConfigChange(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnConfigChange) (event.Subscription, error)
	ParseOnConfigChange(log types.Log) (*ContractEOConfigOnConfigChange, error)

	FilterOnSourceAdded(opts *bind.FilterOpts) (*ContractEOConfigOnSourceAddedIterator, error)
	WatchOnSourceAdded(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSourceAdded) (event.Subscription, error)
	ParseOnSourceAdded(log types.Log) (*ContractEOConfigOnSourceAdded, error)

	FilterOnSourceRemoved(opts *bind.FilterOpts) (*ContractEOConfigOnSourceRemovedIterator, error)
	WatchOnSourceRemoved(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSourceRemoved) (event.Subscription, error)
	ParseOnSourceRemoved(log types.Log) (*ContractEOConfigOnSourceRemoved, error)

	FilterOnSourceUpdated(opts *bind.FilterOpts) (*ContractEOConfigOnSourceUpdatedIterator, error)
	WatchOnSourceUpdated(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSourceUpdated) (event.Subscription, error)
	ParseOnSourceUpdated(log types.Log) (*ContractEOConfigOnSourceUpdated, error)

	FilterOnSymbolAdded(opts *bind.FilterOpts) (*ContractEOConfigOnSymbolAddedIterator, error)
	WatchOnSymbolAdded(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSymbolAdded) (event.Subscription, error)
	ParseOnSymbolAdded(log types.Log) (*ContractEOConfigOnSymbolAdded, error)

	FilterOnSymbolRemoved(opts *bind.FilterOpts) (*ContractEOConfigOnSymbolRemovedIterator, error)
	WatchOnSymbolRemoved(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSymbolRemoved) (event.Subscription, error)
	ParseOnSymbolRemoved(log types.Log) (*ContractEOConfigOnSymbolRemoved, error)

	FilterOnSymbolUpdated(opts *bind.FilterOpts) (*ContractEOConfigOnSymbolUpdatedIterator, error)
	WatchOnSymbolUpdated(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSymbolUpdated) (event.Subscription, error)
	ParseOnSymbolUpdated(log types.Log) (*ContractEOConfigOnSymbolUpdated, error)

	FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractEOConfigOwnershipTransferredIterator, error)
	WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error)
	ParseOwnershipTransferred(log types.Log) (*ContractEOConfigOwnershipTransferred, error)
}

// ContractEOConfig is an auto generated Go binding around an Ethereum contract.
type ContractEOConfig struct {
	ContractEOConfigCaller     // Read-only binding to the contract
	ContractEOConfigTransactor // Write-only binding to the contract
	ContractEOConfigFilterer   // Log filterer for contract events
}

// ContractEOConfig implements the ContractEOConfigMethods interface.
var _ ContractEOConfigMethods = (*ContractEOConfig)(nil)

// ContractEOConfigCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractEOConfigCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractEOConfigCaller implements the ContractEOConfigCalls interface.
var _ ContractEOConfigCalls = (*ContractEOConfigCaller)(nil)

// ContractEOConfigTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractEOConfigTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractEOConfigTransactor implements the ContractEOConfigTransacts interface.
var _ ContractEOConfigTransacts = (*ContractEOConfigTransactor)(nil)

// ContractEOConfigFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractEOConfigFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractEOConfigFilterer implements the ContractEOConfigFilters interface.
var _ ContractEOConfigFilters = (*ContractEOConfigFilterer)(nil)

// ContractEOConfigSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractEOConfigSession struct {
	Contract     *ContractEOConfig // Generic contract binding to set the session for
	CallOpts     bind.CallOpts     // Call options to use throughout this session
	TransactOpts bind.TransactOpts // Transaction auth options to use throughout this session
}

// ContractEOConfigCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractEOConfigCallerSession struct {
	Contract *ContractEOConfigCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts           // Call options to use throughout this session
}

// ContractEOConfigTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractEOConfigTransactorSession struct {
	Contract     *ContractEOConfigTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts           // Transaction auth options to use throughout this session
}

// ContractEOConfigRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractEOConfigRaw struct {
	Contract *ContractEOConfig // Generic contract binding to access the raw methods on
}

// ContractEOConfigCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractEOConfigCallerRaw struct {
	Contract *ContractEOConfigCaller // Generic read-only contract binding to access the raw methods on
}

// ContractEOConfigTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractEOConfigTransactorRaw struct {
	Contract *ContractEOConfigTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractEOConfig creates a new instance of ContractEOConfig, bound to a specific deployed contract.
func NewContractEOConfig(address common.Address, backend bind.ContractBackend) (*ContractEOConfig, error) {
	contract, err := bindContractEOConfig(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractEOConfig{ContractEOConfigCaller: ContractEOConfigCaller{contract: contract}, ContractEOConfigTransactor: ContractEOConfigTransactor{contract: contract}, ContractEOConfigFilterer: ContractEOConfigFilterer{contract: contract}}, nil
}

// NewContractEOConfigCaller creates a new read-only instance of ContractEOConfig, bound to a specific deployed contract.
func NewContractEOConfigCaller(address common.Address, caller bind.ContractCaller) (*ContractEOConfigCaller, error) {
	contract, err := bindContractEOConfig(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigCaller{contract: contract}, nil
}

// NewContractEOConfigTransactor creates a new write-only instance of ContractEOConfig, bound to a specific deployed contract.
func NewContractEOConfigTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractEOConfigTransactor, error) {
	contract, err := bindContractEOConfig(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigTransactor{contract: contract}, nil
}

// NewContractEOConfigFilterer creates a new log filterer instance of ContractEOConfig, bound to a specific deployed contract.
func NewContractEOConfigFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractEOConfigFilterer, error) {
	contract, err := bindContractEOConfig(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigFilterer{contract: contract}, nil
}

// bindContractEOConfig binds a generic wrapper to an already deployed contract.
func bindContractEOConfig(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractEOConfigMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractEOConfig *ContractEOConfigRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractEOConfig.Contract.ContractEOConfigCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractEOConfig *ContractEOConfigRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.ContractEOConfigTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractEOConfig *ContractEOConfigRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.ContractEOConfigTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractEOConfig *ContractEOConfigCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractEOConfig.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractEOConfig *ContractEOConfigTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractEOConfig *ContractEOConfigTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.contract.Transact(opts, method, params...)
}

// Aggregator is a free data retrieval call binding the contract method 0x245a7bfc.
//
// Solidity: function aggregator() view returns(address)
func (_ContractEOConfig *ContractEOConfigCaller) Aggregator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "aggregator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Aggregator is a free data retrieval call binding the contract method 0x245a7bfc.
//
// Solidity: function aggregator() view returns(address)
func (_ContractEOConfig *ContractEOConfigSession) Aggregator() (common.Address, error) {
	return _ContractEOConfig.Contract.Aggregator(&_ContractEOConfig.CallOpts)
}

// Aggregator is a free data retrieval call binding the contract method 0x245a7bfc.
//
// Solidity: function aggregator() view returns(address)
func (_ContractEOConfig *ContractEOConfigCallerSession) Aggregator() (common.Address, error) {
	return _ContractEOConfig.Contract.Aggregator(&_ContractEOConfig.CallOpts)
}

// AliasToOperator is a free data retrieval call binding the contract method 0xbfa65472.
//
// Solidity: function aliasToOperator(address ) view returns(address)
func (_ContractEOConfig *ContractEOConfigCaller) AliasToOperator(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "aliasToOperator", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// AliasToOperator is a free data retrieval call binding the contract method 0xbfa65472.
//
// Solidity: function aliasToOperator(address ) view returns(address)
func (_ContractEOConfig *ContractEOConfigSession) AliasToOperator(arg0 common.Address) (common.Address, error) {
	return _ContractEOConfig.Contract.AliasToOperator(&_ContractEOConfig.CallOpts, arg0)
}

// AliasToOperator is a free data retrieval call binding the contract method 0xbfa65472.
//
// Solidity: function aliasToOperator(address ) view returns(address)
func (_ContractEOConfig *ContractEOConfigCallerSession) AliasToOperator(arg0 common.Address) (common.Address, error) {
	return _ContractEOConfig.Contract.AliasToOperator(&_ContractEOConfig.CallOpts, arg0)
}

// ChainManager is a free data retrieval call binding the contract method 0x5d824812.
//
// Solidity: function chainManager() view returns(address)
func (_ContractEOConfig *ContractEOConfigCaller) ChainManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "chainManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// ChainManager is a free data retrieval call binding the contract method 0x5d824812.
//
// Solidity: function chainManager() view returns(address)
func (_ContractEOConfig *ContractEOConfigSession) ChainManager() (common.Address, error) {
	return _ContractEOConfig.Contract.ChainManager(&_ContractEOConfig.CallOpts)
}

// ChainManager is a free data retrieval call binding the contract method 0x5d824812.
//
// Solidity: function chainManager() view returns(address)
func (_ContractEOConfig *ContractEOConfigCallerSession) ChainManager() (common.Address, error) {
	return _ContractEOConfig.Contract.ChainManager(&_ContractEOConfig.CallOpts)
}

// GetSourceSymbols is a free data retrieval call binding the contract method 0x3ae23dfb.
//
// Solidity: function getSourceSymbols(uint16 id) view returns(uint16[])
func (_ContractEOConfig *ContractEOConfigCaller) GetSourceSymbols(opts *bind.CallOpts, id uint16) ([]uint16, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "getSourceSymbols", id)

	if err != nil {
		return *new([]uint16), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint16)).(*[]uint16)

	return out0, err

}

// GetSourceSymbols is a free data retrieval call binding the contract method 0x3ae23dfb.
//
// Solidity: function getSourceSymbols(uint16 id) view returns(uint16[])
func (_ContractEOConfig *ContractEOConfigSession) GetSourceSymbols(id uint16) ([]uint16, error) {
	return _ContractEOConfig.Contract.GetSourceSymbols(&_ContractEOConfig.CallOpts, id)
}

// GetSourceSymbols is a free data retrieval call binding the contract method 0x3ae23dfb.
//
// Solidity: function getSourceSymbols(uint16 id) view returns(uint16[])
func (_ContractEOConfig *ContractEOConfigCallerSession) GetSourceSymbols(id uint16) ([]uint16, error) {
	return _ContractEOConfig.Contract.GetSourceSymbols(&_ContractEOConfig.CallOpts, id)
}

// GetSymbolSources is a free data retrieval call binding the contract method 0x14832bc8.
//
// Solidity: function getSymbolSources(uint16 id) view returns(uint16[])
func (_ContractEOConfig *ContractEOConfigCaller) GetSymbolSources(opts *bind.CallOpts, id uint16) ([]uint16, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "getSymbolSources", id)

	if err != nil {
		return *new([]uint16), err
	}

	out0 := *abi.ConvertType(out[0], new([]uint16)).(*[]uint16)

	return out0, err

}

// GetSymbolSources is a free data retrieval call binding the contract method 0x14832bc8.
//
// Solidity: function getSymbolSources(uint16 id) view returns(uint16[])
func (_ContractEOConfig *ContractEOConfigSession) GetSymbolSources(id uint16) ([]uint16, error) {
	return _ContractEOConfig.Contract.GetSymbolSources(&_ContractEOConfig.CallOpts, id)
}

// GetSymbolSources is a free data retrieval call binding the contract method 0x14832bc8.
//
// Solidity: function getSymbolSources(uint16 id) view returns(uint16[])
func (_ContractEOConfig *ContractEOConfigCallerSession) GetSymbolSources(id uint16) ([]uint16, error) {
	return _ContractEOConfig.Contract.GetSymbolSources(&_ContractEOConfig.CallOpts, id)
}

// IsIdAllowed is a free data retrieval call binding the contract method 0x04495eb1.
//
// Solidity: function isIdAllowed(bytes4 ) view returns(bool)
func (_ContractEOConfig *ContractEOConfigCaller) IsIdAllowed(opts *bind.CallOpts, arg0 [4]byte) (bool, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "isIdAllowed", arg0)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// IsIdAllowed is a free data retrieval call binding the contract method 0x04495eb1.
//
// Solidity: function isIdAllowed(bytes4 ) view returns(bool)
func (_ContractEOConfig *ContractEOConfigSession) IsIdAllowed(arg0 [4]byte) (bool, error) {
	return _ContractEOConfig.Contract.IsIdAllowed(&_ContractEOConfig.CallOpts, arg0)
}

// IsIdAllowed is a free data retrieval call binding the contract method 0x04495eb1.
//
// Solidity: function isIdAllowed(bytes4 ) view returns(bool)
func (_ContractEOConfig *ContractEOConfigCallerSession) IsIdAllowed(arg0 [4]byte) (bool, error) {
	return _ContractEOConfig.Contract.IsIdAllowed(&_ContractEOConfig.CallOpts, arg0)
}

// OperatorToAlias is a free data retrieval call binding the contract method 0x92c94ab5.
//
// Solidity: function operatorToAlias(address ) view returns(address)
func (_ContractEOConfig *ContractEOConfigCaller) OperatorToAlias(opts *bind.CallOpts, arg0 common.Address) (common.Address, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "operatorToAlias", arg0)

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// OperatorToAlias is a free data retrieval call binding the contract method 0x92c94ab5.
//
// Solidity: function operatorToAlias(address ) view returns(address)
func (_ContractEOConfig *ContractEOConfigSession) OperatorToAlias(arg0 common.Address) (common.Address, error) {
	return _ContractEOConfig.Contract.OperatorToAlias(&_ContractEOConfig.CallOpts, arg0)
}

// OperatorToAlias is a free data retrieval call binding the contract method 0x92c94ab5.
//
// Solidity: function operatorToAlias(address ) view returns(address)
func (_ContractEOConfig *ContractEOConfigCallerSession) OperatorToAlias(arg0 common.Address) (common.Address, error) {
	return _ContractEOConfig.Contract.OperatorToAlias(&_ContractEOConfig.CallOpts, arg0)
}

// OperatorToRegistrationData is a free data retrieval call binding the contract method 0x4a9910fa.
//
// Solidity: function operatorToRegistrationData(address ) view returns(bytes)
func (_ContractEOConfig *ContractEOConfigCaller) OperatorToRegistrationData(opts *bind.CallOpts, arg0 common.Address) ([]byte, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "operatorToRegistrationData", arg0)

	if err != nil {
		return *new([]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([]byte)).(*[]byte)

	return out0, err

}

// OperatorToRegistrationData is a free data retrieval call binding the contract method 0x4a9910fa.
//
// Solidity: function operatorToRegistrationData(address ) view returns(bytes)
func (_ContractEOConfig *ContractEOConfigSession) OperatorToRegistrationData(arg0 common.Address) ([]byte, error) {
	return _ContractEOConfig.Contract.OperatorToRegistrationData(&_ContractEOConfig.CallOpts, arg0)
}

// OperatorToRegistrationData is a free data retrieval call binding the contract method 0x4a9910fa.
//
// Solidity: function operatorToRegistrationData(address ) view returns(bytes)
func (_ContractEOConfig *ContractEOConfigCallerSession) OperatorToRegistrationData(arg0 common.Address) ([]byte, error) {
	return _ContractEOConfig.Contract.OperatorToRegistrationData(&_ContractEOConfig.CallOpts, arg0)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractEOConfig *ContractEOConfigCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractEOConfig *ContractEOConfigSession) Owner() (common.Address, error) {
	return _ContractEOConfig.Contract.Owner(&_ContractEOConfig.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractEOConfig *ContractEOConfigCallerSession) Owner() (common.Address, error) {
	return _ContractEOConfig.Contract.Owner(&_ContractEOConfig.CallOpts)
}

// PackPair is a free data retrieval call binding the contract method 0xc18cb7b0.
//
// Solidity: function packPair(uint16 source, uint16 symbol) pure returns(bytes4 id)
func (_ContractEOConfig *ContractEOConfigCaller) PackPair(opts *bind.CallOpts, source uint16, symbol uint16) ([4]byte, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "packPair", source, symbol)

	if err != nil {
		return *new([4]byte), err
	}

	out0 := *abi.ConvertType(out[0], new([4]byte)).(*[4]byte)

	return out0, err

}

// PackPair is a free data retrieval call binding the contract method 0xc18cb7b0.
//
// Solidity: function packPair(uint16 source, uint16 symbol) pure returns(bytes4 id)
func (_ContractEOConfig *ContractEOConfigSession) PackPair(source uint16, symbol uint16) ([4]byte, error) {
	return _ContractEOConfig.Contract.PackPair(&_ContractEOConfig.CallOpts, source, symbol)
}

// PackPair is a free data retrieval call binding the contract method 0xc18cb7b0.
//
// Solidity: function packPair(uint16 source, uint16 symbol) pure returns(bytes4 id)
func (_ContractEOConfig *ContractEOConfigCallerSession) PackPair(source uint16, symbol uint16) ([4]byte, error) {
	return _ContractEOConfig.Contract.PackPair(&_ContractEOConfig.CallOpts, source, symbol)
}

// SourceById is a free data retrieval call binding the contract method 0xbf81551e.
//
// Solidity: function sourceById(uint16 ) view returns(bytes24 name, uint16 id)
func (_ContractEOConfig *ContractEOConfigCaller) SourceById(opts *bind.CallOpts, arg0 uint16) (struct {
	Name [24]byte
	Id   uint16
}, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "sourceById", arg0)

	outstruct := new(struct {
		Name [24]byte
		Id   uint16
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new([24]byte)).(*[24]byte)
	outstruct.Id = *abi.ConvertType(out[1], new(uint16)).(*uint16)

	return *outstruct, err

}

// SourceById is a free data retrieval call binding the contract method 0xbf81551e.
//
// Solidity: function sourceById(uint16 ) view returns(bytes24 name, uint16 id)
func (_ContractEOConfig *ContractEOConfigSession) SourceById(arg0 uint16) (struct {
	Name [24]byte
	Id   uint16
}, error) {
	return _ContractEOConfig.Contract.SourceById(&_ContractEOConfig.CallOpts, arg0)
}

// SourceById is a free data retrieval call binding the contract method 0xbf81551e.
//
// Solidity: function sourceById(uint16 ) view returns(bytes24 name, uint16 id)
func (_ContractEOConfig *ContractEOConfigCallerSession) SourceById(arg0 uint16) (struct {
	Name [24]byte
	Id   uint16
}, error) {
	return _ContractEOConfig.Contract.SourceById(&_ContractEOConfig.CallOpts, arg0)
}

// SourceId is a free data retrieval call binding the contract method 0x88dea97d.
//
// Solidity: function sourceId(bytes24 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCaller) SourceId(opts *bind.CallOpts, arg0 [24]byte) (uint16, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "sourceId", arg0)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// SourceId is a free data retrieval call binding the contract method 0x88dea97d.
//
// Solidity: function sourceId(bytes24 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigSession) SourceId(arg0 [24]byte) (uint16, error) {
	return _ContractEOConfig.Contract.SourceId(&_ContractEOConfig.CallOpts, arg0)
}

// SourceId is a free data retrieval call binding the contract method 0x88dea97d.
//
// Solidity: function sourceId(bytes24 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCallerSession) SourceId(arg0 [24]byte) (uint16, error) {
	return _ContractEOConfig.Contract.SourceId(&_ContractEOConfig.CallOpts, arg0)
}

// SourceIds is a free data retrieval call binding the contract method 0x6d34c28b.
//
// Solidity: function sourceIds(uint256 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCaller) SourceIds(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "sourceIds", arg0)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// SourceIds is a free data retrieval call binding the contract method 0x6d34c28b.
//
// Solidity: function sourceIds(uint256 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigSession) SourceIds(arg0 *big.Int) (uint16, error) {
	return _ContractEOConfig.Contract.SourceIds(&_ContractEOConfig.CallOpts, arg0)
}

// SourceIds is a free data retrieval call binding the contract method 0x6d34c28b.
//
// Solidity: function sourceIds(uint256 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCallerSession) SourceIds(arg0 *big.Int) (uint16, error) {
	return _ContractEOConfig.Contract.SourceIds(&_ContractEOConfig.CallOpts, arg0)
}

// SourceIdsLength is a free data retrieval call binding the contract method 0x009c03fb.
//
// Solidity: function sourceIdsLength() view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCaller) SourceIdsLength(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "sourceIdsLength")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// SourceIdsLength is a free data retrieval call binding the contract method 0x009c03fb.
//
// Solidity: function sourceIdsLength() view returns(uint16)
func (_ContractEOConfig *ContractEOConfigSession) SourceIdsLength() (uint16, error) {
	return _ContractEOConfig.Contract.SourceIdsLength(&_ContractEOConfig.CallOpts)
}

// SourceIdsLength is a free data retrieval call binding the contract method 0x009c03fb.
//
// Solidity: function sourceIdsLength() view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCallerSession) SourceIdsLength() (uint16, error) {
	return _ContractEOConfig.Contract.SourceIdsLength(&_ContractEOConfig.CallOpts)
}

// SymbolById is a free data retrieval call binding the contract method 0xa0a79a7c.
//
// Solidity: function symbolById(uint16 ) view returns(bytes8 name, uint16 id)
func (_ContractEOConfig *ContractEOConfigCaller) SymbolById(opts *bind.CallOpts, arg0 uint16) (struct {
	Name [8]byte
	Id   uint16
}, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "symbolById", arg0)

	outstruct := new(struct {
		Name [8]byte
		Id   uint16
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.Name = *abi.ConvertType(out[0], new([8]byte)).(*[8]byte)
	outstruct.Id = *abi.ConvertType(out[1], new(uint16)).(*uint16)

	return *outstruct, err

}

// SymbolById is a free data retrieval call binding the contract method 0xa0a79a7c.
//
// Solidity: function symbolById(uint16 ) view returns(bytes8 name, uint16 id)
func (_ContractEOConfig *ContractEOConfigSession) SymbolById(arg0 uint16) (struct {
	Name [8]byte
	Id   uint16
}, error) {
	return _ContractEOConfig.Contract.SymbolById(&_ContractEOConfig.CallOpts, arg0)
}

// SymbolById is a free data retrieval call binding the contract method 0xa0a79a7c.
//
// Solidity: function symbolById(uint16 ) view returns(bytes8 name, uint16 id)
func (_ContractEOConfig *ContractEOConfigCallerSession) SymbolById(arg0 uint16) (struct {
	Name [8]byte
	Id   uint16
}, error) {
	return _ContractEOConfig.Contract.SymbolById(&_ContractEOConfig.CallOpts, arg0)
}

// SymbolId is a free data retrieval call binding the contract method 0x2d75981c.
//
// Solidity: function symbolId(bytes8 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCaller) SymbolId(opts *bind.CallOpts, arg0 [8]byte) (uint16, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "symbolId", arg0)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// SymbolId is a free data retrieval call binding the contract method 0x2d75981c.
//
// Solidity: function symbolId(bytes8 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigSession) SymbolId(arg0 [8]byte) (uint16, error) {
	return _ContractEOConfig.Contract.SymbolId(&_ContractEOConfig.CallOpts, arg0)
}

// SymbolId is a free data retrieval call binding the contract method 0x2d75981c.
//
// Solidity: function symbolId(bytes8 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCallerSession) SymbolId(arg0 [8]byte) (uint16, error) {
	return _ContractEOConfig.Contract.SymbolId(&_ContractEOConfig.CallOpts, arg0)
}

// SymbolIds is a free data retrieval call binding the contract method 0xedc24d69.
//
// Solidity: function symbolIds(uint256 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCaller) SymbolIds(opts *bind.CallOpts, arg0 *big.Int) (uint16, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "symbolIds", arg0)

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// SymbolIds is a free data retrieval call binding the contract method 0xedc24d69.
//
// Solidity: function symbolIds(uint256 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigSession) SymbolIds(arg0 *big.Int) (uint16, error) {
	return _ContractEOConfig.Contract.SymbolIds(&_ContractEOConfig.CallOpts, arg0)
}

// SymbolIds is a free data retrieval call binding the contract method 0xedc24d69.
//
// Solidity: function symbolIds(uint256 ) view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCallerSession) SymbolIds(arg0 *big.Int) (uint16, error) {
	return _ContractEOConfig.Contract.SymbolIds(&_ContractEOConfig.CallOpts, arg0)
}

// SymbolIdsLength is a free data retrieval call binding the contract method 0x20a332a4.
//
// Solidity: function symbolIdsLength() view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCaller) SymbolIdsLength(opts *bind.CallOpts) (uint16, error) {
	var out []interface{}
	err := _ContractEOConfig.contract.Call(opts, &out, "symbolIdsLength")

	if err != nil {
		return *new(uint16), err
	}

	out0 := *abi.ConvertType(out[0], new(uint16)).(*uint16)

	return out0, err

}

// SymbolIdsLength is a free data retrieval call binding the contract method 0x20a332a4.
//
// Solidity: function symbolIdsLength() view returns(uint16)
func (_ContractEOConfig *ContractEOConfigSession) SymbolIdsLength() (uint16, error) {
	return _ContractEOConfig.Contract.SymbolIdsLength(&_ContractEOConfig.CallOpts)
}

// SymbolIdsLength is a free data retrieval call binding the contract method 0x20a332a4.
//
// Solidity: function symbolIdsLength() view returns(uint16)
func (_ContractEOConfig *ContractEOConfigCallerSession) SymbolIdsLength() (uint16, error) {
	return _ContractEOConfig.Contract.SymbolIdsLength(&_ContractEOConfig.CallOpts)
}

// AddSource is a paid mutator transaction binding the contract method 0x13996105.
//
// Solidity: function addSource(bytes24 name) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) AddSource(opts *bind.TransactOpts, name [24]byte) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "addSource", name)
}

// AddSource is a paid mutator transaction binding the contract method 0x13996105.
//
// Solidity: function addSource(bytes24 name) returns()
func (_ContractEOConfig *ContractEOConfigSession) AddSource(name [24]byte) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.AddSource(&_ContractEOConfig.TransactOpts, name)
}

// AddSource is a paid mutator transaction binding the contract method 0x13996105.
//
// Solidity: function addSource(bytes24 name) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) AddSource(name [24]byte) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.AddSource(&_ContractEOConfig.TransactOpts, name)
}

// AddSources is a paid mutator transaction binding the contract method 0xb2ee3c95.
//
// Solidity: function addSources(bytes24[] names) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) AddSources(opts *bind.TransactOpts, names [][24]byte) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "addSources", names)
}

// AddSources is a paid mutator transaction binding the contract method 0xb2ee3c95.
//
// Solidity: function addSources(bytes24[] names) returns()
func (_ContractEOConfig *ContractEOConfigSession) AddSources(names [][24]byte) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.AddSources(&_ContractEOConfig.TransactOpts, names)
}

// AddSources is a paid mutator transaction binding the contract method 0xb2ee3c95.
//
// Solidity: function addSources(bytes24[] names) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) AddSources(names [][24]byte) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.AddSources(&_ContractEOConfig.TransactOpts, names)
}

// AddSymbol is a paid mutator transaction binding the contract method 0x08059117.
//
// Solidity: function addSymbol(bytes8 name) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) AddSymbol(opts *bind.TransactOpts, name [8]byte) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "addSymbol", name)
}

// AddSymbol is a paid mutator transaction binding the contract method 0x08059117.
//
// Solidity: function addSymbol(bytes8 name) returns()
func (_ContractEOConfig *ContractEOConfigSession) AddSymbol(name [8]byte) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.AddSymbol(&_ContractEOConfig.TransactOpts, name)
}

// AddSymbol is a paid mutator transaction binding the contract method 0x08059117.
//
// Solidity: function addSymbol(bytes8 name) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) AddSymbol(name [8]byte) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.AddSymbol(&_ContractEOConfig.TransactOpts, name)
}

// AddSymbols is a paid mutator transaction binding the contract method 0xba868392.
//
// Solidity: function addSymbols(bytes8[] names) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) AddSymbols(opts *bind.TransactOpts, names [][8]byte) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "addSymbols", names)
}

// AddSymbols is a paid mutator transaction binding the contract method 0xba868392.
//
// Solidity: function addSymbols(bytes8[] names) returns()
func (_ContractEOConfig *ContractEOConfigSession) AddSymbols(names [][8]byte) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.AddSymbols(&_ContractEOConfig.TransactOpts, names)
}

// AddSymbols is a paid mutator transaction binding the contract method 0xba868392.
//
// Solidity: function addSymbols(bytes8[] names) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) AddSymbols(names [][8]byte) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.AddSymbols(&_ContractEOConfig.TransactOpts, names)
}

// DeclareAlias is a paid mutator transaction binding the contract method 0xf405566d.
//
// Solidity: function declareAlias(address operatorAlias) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) DeclareAlias(opts *bind.TransactOpts, operatorAlias common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "declareAlias", operatorAlias)
}

// DeclareAlias is a paid mutator transaction binding the contract method 0xf405566d.
//
// Solidity: function declareAlias(address operatorAlias) returns()
func (_ContractEOConfig *ContractEOConfigSession) DeclareAlias(operatorAlias common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.DeclareAlias(&_ContractEOConfig.TransactOpts, operatorAlias)
}

// DeclareAlias is a paid mutator transaction binding the contract method 0xf405566d.
//
// Solidity: function declareAlias(address operatorAlias) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) DeclareAlias(operatorAlias common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.DeclareAlias(&_ContractEOConfig.TransactOpts, operatorAlias)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ContractEOConfig *ContractEOConfigTransactor) Initialize(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "initialize")
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ContractEOConfig *ContractEOConfigSession) Initialize() (*types.Transaction, error) {
	return _ContractEOConfig.Contract.Initialize(&_ContractEOConfig.TransactOpts)
}

// Initialize is a paid mutator transaction binding the contract method 0x8129fc1c.
//
// Solidity: function initialize() returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) Initialize() (*types.Transaction, error) {
	return _ContractEOConfig.Contract.Initialize(&_ContractEOConfig.TransactOpts)
}

// Notify is a paid mutator transaction binding the contract method 0x899f5898.
//
// Solidity: function notify() returns()
func (_ContractEOConfig *ContractEOConfigTransactor) Notify(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "notify")
}

// Notify is a paid mutator transaction binding the contract method 0x899f5898.
//
// Solidity: function notify() returns()
func (_ContractEOConfig *ContractEOConfigSession) Notify() (*types.Transaction, error) {
	return _ContractEOConfig.Contract.Notify(&_ContractEOConfig.TransactOpts)
}

// Notify is a paid mutator transaction binding the contract method 0x899f5898.
//
// Solidity: function notify() returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) Notify() (*types.Transaction, error) {
	return _ContractEOConfig.Contract.Notify(&_ContractEOConfig.TransactOpts)
}

// OnStateReceive is a paid mutator transaction binding the contract method 0xeeb49945.
//
// Solidity: function onStateReceive(uint256 , address sender, bytes data) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) OnStateReceive(opts *bind.TransactOpts, arg0 *big.Int, sender common.Address, data []byte) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "onStateReceive", arg0, sender, data)
}

// OnStateReceive is a paid mutator transaction binding the contract method 0xeeb49945.
//
// Solidity: function onStateReceive(uint256 , address sender, bytes data) returns()
func (_ContractEOConfig *ContractEOConfigSession) OnStateReceive(arg0 *big.Int, sender common.Address, data []byte) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.OnStateReceive(&_ContractEOConfig.TransactOpts, arg0, sender, data)
}

// OnStateReceive is a paid mutator transaction binding the contract method 0xeeb49945.
//
// Solidity: function onStateReceive(uint256 , address sender, bytes data) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) OnStateReceive(arg0 *big.Int, sender common.Address, data []byte) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.OnStateReceive(&_ContractEOConfig.TransactOpts, arg0, sender, data)
}

// RemoveSource is a paid mutator transaction binding the contract method 0x7672db8e.
//
// Solidity: function removeSource(uint16 id) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) RemoveSource(opts *bind.TransactOpts, id uint16) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "removeSource", id)
}

// RemoveSource is a paid mutator transaction binding the contract method 0x7672db8e.
//
// Solidity: function removeSource(uint16 id) returns()
func (_ContractEOConfig *ContractEOConfigSession) RemoveSource(id uint16) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.RemoveSource(&_ContractEOConfig.TransactOpts, id)
}

// RemoveSource is a paid mutator transaction binding the contract method 0x7672db8e.
//
// Solidity: function removeSource(uint16 id) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) RemoveSource(id uint16) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.RemoveSource(&_ContractEOConfig.TransactOpts, id)
}

// RemoveSymbol is a paid mutator transaction binding the contract method 0x5aa264e4.
//
// Solidity: function removeSymbol(uint16 id) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) RemoveSymbol(opts *bind.TransactOpts, id uint16) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "removeSymbol", id)
}

// RemoveSymbol is a paid mutator transaction binding the contract method 0x5aa264e4.
//
// Solidity: function removeSymbol(uint16 id) returns()
func (_ContractEOConfig *ContractEOConfigSession) RemoveSymbol(id uint16) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.RemoveSymbol(&_ContractEOConfig.TransactOpts, id)
}

// RemoveSymbol is a paid mutator transaction binding the contract method 0x5aa264e4.
//
// Solidity: function removeSymbol(uint16 id) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) RemoveSymbol(id uint16) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.RemoveSymbol(&_ContractEOConfig.TransactOpts, id)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractEOConfig *ContractEOConfigTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractEOConfig *ContractEOConfigSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractEOConfig.Contract.RenounceOwnership(&_ContractEOConfig.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractEOConfig.Contract.RenounceOwnership(&_ContractEOConfig.TransactOpts)
}

// SetAggregator is a paid mutator transaction binding the contract method 0xf9120af6.
//
// Solidity: function setAggregator(address aggregator_) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) SetAggregator(opts *bind.TransactOpts, aggregator_ common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "setAggregator", aggregator_)
}

// SetAggregator is a paid mutator transaction binding the contract method 0xf9120af6.
//
// Solidity: function setAggregator(address aggregator_) returns()
func (_ContractEOConfig *ContractEOConfigSession) SetAggregator(aggregator_ common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.SetAggregator(&_ContractEOConfig.TransactOpts, aggregator_)
}

// SetAggregator is a paid mutator transaction binding the contract method 0xf9120af6.
//
// Solidity: function setAggregator(address aggregator_) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) SetAggregator(aggregator_ common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.SetAggregator(&_ContractEOConfig.TransactOpts, aggregator_)
}

// SetChainManager is a paid mutator transaction binding the contract method 0xd70cf0ed.
//
// Solidity: function setChainManager(address chainManager_) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) SetChainManager(opts *bind.TransactOpts, chainManager_ common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "setChainManager", chainManager_)
}

// SetChainManager is a paid mutator transaction binding the contract method 0xd70cf0ed.
//
// Solidity: function setChainManager(address chainManager_) returns()
func (_ContractEOConfig *ContractEOConfigSession) SetChainManager(chainManager_ common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.SetChainManager(&_ContractEOConfig.TransactOpts, chainManager_)
}

// SetChainManager is a paid mutator transaction binding the contract method 0xd70cf0ed.
//
// Solidity: function setChainManager(address chainManager_) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) SetChainManager(chainManager_ common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.SetChainManager(&_ContractEOConfig.TransactOpts, chainManager_)
}

// Subscribe is a paid mutator transaction binding the contract method 0x41a7726a.
//
// Solidity: function subscribe(address listener) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) Subscribe(opts *bind.TransactOpts, listener common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "subscribe", listener)
}

// Subscribe is a paid mutator transaction binding the contract method 0x41a7726a.
//
// Solidity: function subscribe(address listener) returns()
func (_ContractEOConfig *ContractEOConfigSession) Subscribe(listener common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.Subscribe(&_ContractEOConfig.TransactOpts, listener)
}

// Subscribe is a paid mutator transaction binding the contract method 0x41a7726a.
//
// Solidity: function subscribe(address listener) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) Subscribe(listener common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.Subscribe(&_ContractEOConfig.TransactOpts, listener)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractEOConfig *ContractEOConfigSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.TransferOwnership(&_ContractEOConfig.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.TransferOwnership(&_ContractEOConfig.TransactOpts, newOwner)
}

// Unsubscribe is a paid mutator transaction binding the contract method 0x7262561c.
//
// Solidity: function unsubscribe(address listener) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) Unsubscribe(opts *bind.TransactOpts, listener common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "unsubscribe", listener)
}

// Unsubscribe is a paid mutator transaction binding the contract method 0x7262561c.
//
// Solidity: function unsubscribe(address listener) returns()
func (_ContractEOConfig *ContractEOConfigSession) Unsubscribe(listener common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.Unsubscribe(&_ContractEOConfig.TransactOpts, listener)
}

// Unsubscribe is a paid mutator transaction binding the contract method 0x7262561c.
//
// Solidity: function unsubscribe(address listener) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) Unsubscribe(listener common.Address) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.Unsubscribe(&_ContractEOConfig.TransactOpts, listener)
}

// UpdateSource is a paid mutator transaction binding the contract method 0x88c54990.
//
// Solidity: function updateSource(uint16 sourceId_, bytes24 name, uint16[] symbols_) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) UpdateSource(opts *bind.TransactOpts, sourceId_ uint16, name [24]byte, symbols_ []uint16) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "updateSource", sourceId_, name, symbols_)
}

// UpdateSource is a paid mutator transaction binding the contract method 0x88c54990.
//
// Solidity: function updateSource(uint16 sourceId_, bytes24 name, uint16[] symbols_) returns()
func (_ContractEOConfig *ContractEOConfigSession) UpdateSource(sourceId_ uint16, name [24]byte, symbols_ []uint16) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.UpdateSource(&_ContractEOConfig.TransactOpts, sourceId_, name, symbols_)
}

// UpdateSource is a paid mutator transaction binding the contract method 0x88c54990.
//
// Solidity: function updateSource(uint16 sourceId_, bytes24 name, uint16[] symbols_) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) UpdateSource(sourceId_ uint16, name [24]byte, symbols_ []uint16) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.UpdateSource(&_ContractEOConfig.TransactOpts, sourceId_, name, symbols_)
}

// UpdateSymbol is a paid mutator transaction binding the contract method 0x9483a58d.
//
// Solidity: function updateSymbol(uint16 symbolId_, bytes8 name, uint16[] sources_) returns()
func (_ContractEOConfig *ContractEOConfigTransactor) UpdateSymbol(opts *bind.TransactOpts, symbolId_ uint16, name [8]byte, sources_ []uint16) (*types.Transaction, error) {
	return _ContractEOConfig.contract.Transact(opts, "updateSymbol", symbolId_, name, sources_)
}

// UpdateSymbol is a paid mutator transaction binding the contract method 0x9483a58d.
//
// Solidity: function updateSymbol(uint16 symbolId_, bytes8 name, uint16[] sources_) returns()
func (_ContractEOConfig *ContractEOConfigSession) UpdateSymbol(symbolId_ uint16, name [8]byte, sources_ []uint16) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.UpdateSymbol(&_ContractEOConfig.TransactOpts, symbolId_, name, sources_)
}

// UpdateSymbol is a paid mutator transaction binding the contract method 0x9483a58d.
//
// Solidity: function updateSymbol(uint16 symbolId_, bytes8 name, uint16[] sources_) returns()
func (_ContractEOConfig *ContractEOConfigTransactorSession) UpdateSymbol(symbolId_ uint16, name [8]byte, sources_ []uint16) (*types.Transaction, error) {
	return _ContractEOConfig.Contract.UpdateSymbol(&_ContractEOConfig.TransactOpts, symbolId_, name, sources_)
}

// ContractEOConfigInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractEOConfig contract.
type ContractEOConfigInitializedIterator struct {
	Event *ContractEOConfigInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOConfigInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOConfigInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOConfigInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOConfigInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOConfigInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOConfigInitialized represents a Initialized event raised by the ContractEOConfig contract.
type ContractEOConfigInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractEOConfig *ContractEOConfigFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractEOConfigInitializedIterator, error) {

	logs, sub, err := _ContractEOConfig.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigInitializedIterator{contract: _ContractEOConfig.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractEOConfig *ContractEOConfigFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractEOConfigInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractEOConfig.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOConfigInitialized)
				if err := _ContractEOConfig.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractEOConfig *ContractEOConfigFilterer) ParseInitialized(log types.Log) (*ContractEOConfigInitialized, error) {
	event := new(ContractEOConfigInitialized)
	if err := _ContractEOConfig.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOConfigOnConfigChangeIterator is returned from FilterOnConfigChange and is used to iterate over the raw logs and unpacked data for OnConfigChange events raised by the ContractEOConfig contract.
type ContractEOConfigOnConfigChangeIterator struct {
	Event *ContractEOConfigOnConfigChange // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOConfigOnConfigChangeIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOConfigOnConfigChange)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOConfigOnConfigChange)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOConfigOnConfigChangeIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOConfigOnConfigChangeIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOConfigOnConfigChange represents a OnConfigChange event raised by the ContractEOConfig contract.
type ContractEOConfigOnConfigChange struct {
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOnConfigChange is a free log retrieval operation binding the contract event 0x662f307c99b27e8c90dbce053f13da64171deb8c531b3ae9c9446ab010da7fdc.
//
// Solidity: event OnConfigChange()
func (_ContractEOConfig *ContractEOConfigFilterer) FilterOnConfigChange(opts *bind.FilterOpts) (*ContractEOConfigOnConfigChangeIterator, error) {

	logs, sub, err := _ContractEOConfig.contract.FilterLogs(opts, "OnConfigChange")
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigOnConfigChangeIterator{contract: _ContractEOConfig.contract, event: "OnConfigChange", logs: logs, sub: sub}, nil
}

// WatchOnConfigChange is a free log subscription operation binding the contract event 0x662f307c99b27e8c90dbce053f13da64171deb8c531b3ae9c9446ab010da7fdc.
//
// Solidity: event OnConfigChange()
func (_ContractEOConfig *ContractEOConfigFilterer) WatchOnConfigChange(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnConfigChange) (event.Subscription, error) {

	logs, sub, err := _ContractEOConfig.contract.WatchLogs(opts, "OnConfigChange")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOConfigOnConfigChange)
				if err := _ContractEOConfig.contract.UnpackLog(event, "OnConfigChange", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnConfigChange is a log parse operation binding the contract event 0x662f307c99b27e8c90dbce053f13da64171deb8c531b3ae9c9446ab010da7fdc.
//
// Solidity: event OnConfigChange()
func (_ContractEOConfig *ContractEOConfigFilterer) ParseOnConfigChange(log types.Log) (*ContractEOConfigOnConfigChange, error) {
	event := new(ContractEOConfigOnConfigChange)
	if err := _ContractEOConfig.contract.UnpackLog(event, "OnConfigChange", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOConfigOnSourceAddedIterator is returned from FilterOnSourceAdded and is used to iterate over the raw logs and unpacked data for OnSourceAdded events raised by the ContractEOConfig contract.
type ContractEOConfigOnSourceAddedIterator struct {
	Event *ContractEOConfigOnSourceAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOConfigOnSourceAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOConfigOnSourceAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOConfigOnSourceAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOConfigOnSourceAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOConfigOnSourceAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOConfigOnSourceAdded represents a OnSourceAdded event raised by the ContractEOConfig contract.
type ContractEOConfigOnSourceAdded struct {
	Id   uint16
	Name [24]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOnSourceAdded is a free log retrieval operation binding the contract event 0x209da2b4b51d7df154f686f6190e38bf6eb987bf19f48df080b9a14111762d88.
//
// Solidity: event OnSourceAdded(uint16 id, bytes24 name)
func (_ContractEOConfig *ContractEOConfigFilterer) FilterOnSourceAdded(opts *bind.FilterOpts) (*ContractEOConfigOnSourceAddedIterator, error) {

	logs, sub, err := _ContractEOConfig.contract.FilterLogs(opts, "OnSourceAdded")
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigOnSourceAddedIterator{contract: _ContractEOConfig.contract, event: "OnSourceAdded", logs: logs, sub: sub}, nil
}

// WatchOnSourceAdded is a free log subscription operation binding the contract event 0x209da2b4b51d7df154f686f6190e38bf6eb987bf19f48df080b9a14111762d88.
//
// Solidity: event OnSourceAdded(uint16 id, bytes24 name)
func (_ContractEOConfig *ContractEOConfigFilterer) WatchOnSourceAdded(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSourceAdded) (event.Subscription, error) {

	logs, sub, err := _ContractEOConfig.contract.WatchLogs(opts, "OnSourceAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOConfigOnSourceAdded)
				if err := _ContractEOConfig.contract.UnpackLog(event, "OnSourceAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnSourceAdded is a log parse operation binding the contract event 0x209da2b4b51d7df154f686f6190e38bf6eb987bf19f48df080b9a14111762d88.
//
// Solidity: event OnSourceAdded(uint16 id, bytes24 name)
func (_ContractEOConfig *ContractEOConfigFilterer) ParseOnSourceAdded(log types.Log) (*ContractEOConfigOnSourceAdded, error) {
	event := new(ContractEOConfigOnSourceAdded)
	if err := _ContractEOConfig.contract.UnpackLog(event, "OnSourceAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOConfigOnSourceRemovedIterator is returned from FilterOnSourceRemoved and is used to iterate over the raw logs and unpacked data for OnSourceRemoved events raised by the ContractEOConfig contract.
type ContractEOConfigOnSourceRemovedIterator struct {
	Event *ContractEOConfigOnSourceRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOConfigOnSourceRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOConfigOnSourceRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOConfigOnSourceRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOConfigOnSourceRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOConfigOnSourceRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOConfigOnSourceRemoved represents a OnSourceRemoved event raised by the ContractEOConfig contract.
type ContractEOConfigOnSourceRemoved struct {
	Id  uint16
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOnSourceRemoved is a free log retrieval operation binding the contract event 0xce77a2b83741e02bd444c230b0f3ab40ea28201581cd73d3fe76809d16cca361.
//
// Solidity: event OnSourceRemoved(uint16 id)
func (_ContractEOConfig *ContractEOConfigFilterer) FilterOnSourceRemoved(opts *bind.FilterOpts) (*ContractEOConfigOnSourceRemovedIterator, error) {

	logs, sub, err := _ContractEOConfig.contract.FilterLogs(opts, "OnSourceRemoved")
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigOnSourceRemovedIterator{contract: _ContractEOConfig.contract, event: "OnSourceRemoved", logs: logs, sub: sub}, nil
}

// WatchOnSourceRemoved is a free log subscription operation binding the contract event 0xce77a2b83741e02bd444c230b0f3ab40ea28201581cd73d3fe76809d16cca361.
//
// Solidity: event OnSourceRemoved(uint16 id)
func (_ContractEOConfig *ContractEOConfigFilterer) WatchOnSourceRemoved(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSourceRemoved) (event.Subscription, error) {

	logs, sub, err := _ContractEOConfig.contract.WatchLogs(opts, "OnSourceRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOConfigOnSourceRemoved)
				if err := _ContractEOConfig.contract.UnpackLog(event, "OnSourceRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnSourceRemoved is a log parse operation binding the contract event 0xce77a2b83741e02bd444c230b0f3ab40ea28201581cd73d3fe76809d16cca361.
//
// Solidity: event OnSourceRemoved(uint16 id)
func (_ContractEOConfig *ContractEOConfigFilterer) ParseOnSourceRemoved(log types.Log) (*ContractEOConfigOnSourceRemoved, error) {
	event := new(ContractEOConfigOnSourceRemoved)
	if err := _ContractEOConfig.contract.UnpackLog(event, "OnSourceRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOConfigOnSourceUpdatedIterator is returned from FilterOnSourceUpdated and is used to iterate over the raw logs and unpacked data for OnSourceUpdated events raised by the ContractEOConfig contract.
type ContractEOConfigOnSourceUpdatedIterator struct {
	Event *ContractEOConfigOnSourceUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOConfigOnSourceUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOConfigOnSourceUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOConfigOnSourceUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOConfigOnSourceUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOConfigOnSourceUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOConfigOnSourceUpdated represents a OnSourceUpdated event raised by the ContractEOConfig contract.
type ContractEOConfigOnSourceUpdated struct {
	Id      uint16
	Name    [24]byte
	Symbols []uint16
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOnSourceUpdated is a free log retrieval operation binding the contract event 0x051fa95d237354f8475b41634acc198ae4da9758585b7ab07f2f6839f71492a2.
//
// Solidity: event OnSourceUpdated(uint16 id, bytes24 name, uint16[] symbols)
func (_ContractEOConfig *ContractEOConfigFilterer) FilterOnSourceUpdated(opts *bind.FilterOpts) (*ContractEOConfigOnSourceUpdatedIterator, error) {

	logs, sub, err := _ContractEOConfig.contract.FilterLogs(opts, "OnSourceUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigOnSourceUpdatedIterator{contract: _ContractEOConfig.contract, event: "OnSourceUpdated", logs: logs, sub: sub}, nil
}

// WatchOnSourceUpdated is a free log subscription operation binding the contract event 0x051fa95d237354f8475b41634acc198ae4da9758585b7ab07f2f6839f71492a2.
//
// Solidity: event OnSourceUpdated(uint16 id, bytes24 name, uint16[] symbols)
func (_ContractEOConfig *ContractEOConfigFilterer) WatchOnSourceUpdated(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSourceUpdated) (event.Subscription, error) {

	logs, sub, err := _ContractEOConfig.contract.WatchLogs(opts, "OnSourceUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOConfigOnSourceUpdated)
				if err := _ContractEOConfig.contract.UnpackLog(event, "OnSourceUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnSourceUpdated is a log parse operation binding the contract event 0x051fa95d237354f8475b41634acc198ae4da9758585b7ab07f2f6839f71492a2.
//
// Solidity: event OnSourceUpdated(uint16 id, bytes24 name, uint16[] symbols)
func (_ContractEOConfig *ContractEOConfigFilterer) ParseOnSourceUpdated(log types.Log) (*ContractEOConfigOnSourceUpdated, error) {
	event := new(ContractEOConfigOnSourceUpdated)
	if err := _ContractEOConfig.contract.UnpackLog(event, "OnSourceUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOConfigOnSymbolAddedIterator is returned from FilterOnSymbolAdded and is used to iterate over the raw logs and unpacked data for OnSymbolAdded events raised by the ContractEOConfig contract.
type ContractEOConfigOnSymbolAddedIterator struct {
	Event *ContractEOConfigOnSymbolAdded // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOConfigOnSymbolAddedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOConfigOnSymbolAdded)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOConfigOnSymbolAdded)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOConfigOnSymbolAddedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOConfigOnSymbolAddedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOConfigOnSymbolAdded represents a OnSymbolAdded event raised by the ContractEOConfig contract.
type ContractEOConfigOnSymbolAdded struct {
	Id   uint16
	Name [8]byte
	Raw  types.Log // Blockchain specific contextual infos
}

// FilterOnSymbolAdded is a free log retrieval operation binding the contract event 0x17c9d771a4294ad678b91f00d84d6c838ce1f073b54b67bf7070320331667e99.
//
// Solidity: event OnSymbolAdded(uint16 id, bytes8 name)
func (_ContractEOConfig *ContractEOConfigFilterer) FilterOnSymbolAdded(opts *bind.FilterOpts) (*ContractEOConfigOnSymbolAddedIterator, error) {

	logs, sub, err := _ContractEOConfig.contract.FilterLogs(opts, "OnSymbolAdded")
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigOnSymbolAddedIterator{contract: _ContractEOConfig.contract, event: "OnSymbolAdded", logs: logs, sub: sub}, nil
}

// WatchOnSymbolAdded is a free log subscription operation binding the contract event 0x17c9d771a4294ad678b91f00d84d6c838ce1f073b54b67bf7070320331667e99.
//
// Solidity: event OnSymbolAdded(uint16 id, bytes8 name)
func (_ContractEOConfig *ContractEOConfigFilterer) WatchOnSymbolAdded(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSymbolAdded) (event.Subscription, error) {

	logs, sub, err := _ContractEOConfig.contract.WatchLogs(opts, "OnSymbolAdded")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOConfigOnSymbolAdded)
				if err := _ContractEOConfig.contract.UnpackLog(event, "OnSymbolAdded", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnSymbolAdded is a log parse operation binding the contract event 0x17c9d771a4294ad678b91f00d84d6c838ce1f073b54b67bf7070320331667e99.
//
// Solidity: event OnSymbolAdded(uint16 id, bytes8 name)
func (_ContractEOConfig *ContractEOConfigFilterer) ParseOnSymbolAdded(log types.Log) (*ContractEOConfigOnSymbolAdded, error) {
	event := new(ContractEOConfigOnSymbolAdded)
	if err := _ContractEOConfig.contract.UnpackLog(event, "OnSymbolAdded", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOConfigOnSymbolRemovedIterator is returned from FilterOnSymbolRemoved and is used to iterate over the raw logs and unpacked data for OnSymbolRemoved events raised by the ContractEOConfig contract.
type ContractEOConfigOnSymbolRemovedIterator struct {
	Event *ContractEOConfigOnSymbolRemoved // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOConfigOnSymbolRemovedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOConfigOnSymbolRemoved)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOConfigOnSymbolRemoved)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOConfigOnSymbolRemovedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOConfigOnSymbolRemovedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOConfigOnSymbolRemoved represents a OnSymbolRemoved event raised by the ContractEOConfig contract.
type ContractEOConfigOnSymbolRemoved struct {
	Id  uint16
	Raw types.Log // Blockchain specific contextual infos
}

// FilterOnSymbolRemoved is a free log retrieval operation binding the contract event 0xaf1d0220552f1ffa37378a7942dffc37d3f6e51062806798e46e650aa95ae693.
//
// Solidity: event OnSymbolRemoved(uint16 id)
func (_ContractEOConfig *ContractEOConfigFilterer) FilterOnSymbolRemoved(opts *bind.FilterOpts) (*ContractEOConfigOnSymbolRemovedIterator, error) {

	logs, sub, err := _ContractEOConfig.contract.FilterLogs(opts, "OnSymbolRemoved")
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigOnSymbolRemovedIterator{contract: _ContractEOConfig.contract, event: "OnSymbolRemoved", logs: logs, sub: sub}, nil
}

// WatchOnSymbolRemoved is a free log subscription operation binding the contract event 0xaf1d0220552f1ffa37378a7942dffc37d3f6e51062806798e46e650aa95ae693.
//
// Solidity: event OnSymbolRemoved(uint16 id)
func (_ContractEOConfig *ContractEOConfigFilterer) WatchOnSymbolRemoved(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSymbolRemoved) (event.Subscription, error) {

	logs, sub, err := _ContractEOConfig.contract.WatchLogs(opts, "OnSymbolRemoved")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOConfigOnSymbolRemoved)
				if err := _ContractEOConfig.contract.UnpackLog(event, "OnSymbolRemoved", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnSymbolRemoved is a log parse operation binding the contract event 0xaf1d0220552f1ffa37378a7942dffc37d3f6e51062806798e46e650aa95ae693.
//
// Solidity: event OnSymbolRemoved(uint16 id)
func (_ContractEOConfig *ContractEOConfigFilterer) ParseOnSymbolRemoved(log types.Log) (*ContractEOConfigOnSymbolRemoved, error) {
	event := new(ContractEOConfigOnSymbolRemoved)
	if err := _ContractEOConfig.contract.UnpackLog(event, "OnSymbolRemoved", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOConfigOnSymbolUpdatedIterator is returned from FilterOnSymbolUpdated and is used to iterate over the raw logs and unpacked data for OnSymbolUpdated events raised by the ContractEOConfig contract.
type ContractEOConfigOnSymbolUpdatedIterator struct {
	Event *ContractEOConfigOnSymbolUpdated // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOConfigOnSymbolUpdatedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOConfigOnSymbolUpdated)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOConfigOnSymbolUpdated)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOConfigOnSymbolUpdatedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOConfigOnSymbolUpdatedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOConfigOnSymbolUpdated represents a OnSymbolUpdated event raised by the ContractEOConfig contract.
type ContractEOConfigOnSymbolUpdated struct {
	Id      uint16
	Name    [8]byte
	Sources []uint16
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterOnSymbolUpdated is a free log retrieval operation binding the contract event 0x05aefdf7098c008b0f258f7f5aceb8ed4e93f8faedba69832f087a0c3a09d1df.
//
// Solidity: event OnSymbolUpdated(uint16 id, bytes8 name, uint16[] sources)
func (_ContractEOConfig *ContractEOConfigFilterer) FilterOnSymbolUpdated(opts *bind.FilterOpts) (*ContractEOConfigOnSymbolUpdatedIterator, error) {

	logs, sub, err := _ContractEOConfig.contract.FilterLogs(opts, "OnSymbolUpdated")
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigOnSymbolUpdatedIterator{contract: _ContractEOConfig.contract, event: "OnSymbolUpdated", logs: logs, sub: sub}, nil
}

// WatchOnSymbolUpdated is a free log subscription operation binding the contract event 0x05aefdf7098c008b0f258f7f5aceb8ed4e93f8faedba69832f087a0c3a09d1df.
//
// Solidity: event OnSymbolUpdated(uint16 id, bytes8 name, uint16[] sources)
func (_ContractEOConfig *ContractEOConfigFilterer) WatchOnSymbolUpdated(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOnSymbolUpdated) (event.Subscription, error) {

	logs, sub, err := _ContractEOConfig.contract.WatchLogs(opts, "OnSymbolUpdated")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOConfigOnSymbolUpdated)
				if err := _ContractEOConfig.contract.UnpackLog(event, "OnSymbolUpdated", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOnSymbolUpdated is a log parse operation binding the contract event 0x05aefdf7098c008b0f258f7f5aceb8ed4e93f8faedba69832f087a0c3a09d1df.
//
// Solidity: event OnSymbolUpdated(uint16 id, bytes8 name, uint16[] sources)
func (_ContractEOConfig *ContractEOConfigFilterer) ParseOnSymbolUpdated(log types.Log) (*ContractEOConfigOnSymbolUpdated, error) {
	event := new(ContractEOConfigOnSymbolUpdated)
	if err := _ContractEOConfig.contract.UnpackLog(event, "OnSymbolUpdated", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractEOConfigOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractEOConfig contract.
type ContractEOConfigOwnershipTransferredIterator struct {
	Event *ContractEOConfigOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractEOConfigOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractEOConfigOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractEOConfigOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractEOConfigOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractEOConfigOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractEOConfigOwnershipTransferred represents a OwnershipTransferred event raised by the ContractEOConfig contract.
type ContractEOConfigOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractEOConfig *ContractEOConfigFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractEOConfigOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractEOConfig.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractEOConfigOwnershipTransferredIterator{contract: _ContractEOConfig.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractEOConfig *ContractEOConfigFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractEOConfigOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractEOConfig.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractEOConfigOwnershipTransferred)
				if err := _ContractEOConfig.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractEOConfig *ContractEOConfigFilterer) ParseOwnershipTransferred(log types.Log) (*ContractEOConfigOwnershipTransferred, error) {
	event := new(ContractEOConfigOwnershipTransferred)
	if err := _ContractEOConfig.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
