ARG GO_VERSION=alpine
ARG BASE=golang:1.21.7-alpine3.19

FROM ${BASE} as builder

RUN apk update \
 && apk add --no-cache \
    linux-headers \
    gcc \
    libtool \
    openssl-dev \
    libffi \
    tini \
    git \
    'su-exec>=0.2' \
 && apk add --no-cache --virtual .build_deps build-base libffi-dev

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN addgroup -g 502 -S eoracle \
 && adduser -u 502 -S -G eoracle eoracle \
 && mkdir -p /app/eoracle/logs \
 && chown -R eoracle:eoracle /app/eoracle

# Move to working directory
WORKDIR /app/eoracle

# Download dependency using go mod
COPY go.mod .
COPY go.sum .
RUN go mod download
COPY --chown=eoracle:eoracle . .

RUN platform=arm64 && \
    if [ $(uname -m) = x86_64 ]; then platform=amd64; fi && \
    make build-oprcli-${platform} && \
    mv ./bin/oprcli-${platform} ./bin/oprcli 
RUN chown eoracle:eoracle ./bin/oprcli

FROM golang:${GO_VERSION}

RUN apk update \
 && apk add --no-cache \
    linux-headers \
    gcc \
    libtool \
    openssl-dev \
    libffi \
    tini \
    git \
    'su-exec>=0.2' \
 && apk add --no-cache --virtual .build_deps build-base libffi-dev

# add our user and group first to make sure their IDs get assigned consistently, regardless of whatever dependencies get added
RUN addgroup -g 502 -S eoracle \
 && adduser -u 502 -S -G eoracle eoracle \
 && mkdir -p /app/eoracle/logs \
 && mkdir -p /app/eoracle/datadir \
 && chown -R eoracle:eoracle /app/eoracle

# Move to working directory
WORKDIR /app/eoracle

COPY --from=builder /app/eoracle/bin/oprcli /app/eoracle/bin/oprcli

COPY docker-entrypoint-oprcli.sh /usr/local/bin/

ENV PATH="/app/eoracle/bin:${PATH}"

ENTRYPOINT ["/sbin/tini", "--", "/bin/sh", "/usr/local/bin/docker-entrypoint-oprcli.sh"]